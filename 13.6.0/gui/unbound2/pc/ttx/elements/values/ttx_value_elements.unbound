



(def macro SCOPE_GET_ALTERNATIVE_VALUE_DELTA (	_varNameValue:str, _varNameDelta:str, _varNameShowDelta:str, _altValueEntity:expression,
												_valueEntry:expression, _showDelta:expression, _multiplier:number = 1)
	(var name="_varNameValue" type=number value="_altValueEntity ? _altValueEntity.parameter.currentValue : _valueEntry.value * _multiplier" (event "_altValueEntity.parameter.evChanged"))
	(var name="'altDelta'" type=number value="_altValueEntity ? (_altValueEntity.parameter.currentValue - _altValueEntity.parameter.baseValue) / _multiplier : 0" (event "_altValueEntity.parameter.evChanged"))
	(var name="_varNameDelta" type=number value="altDelta != 0 ? altDelta : _valueEntry.delta * _multiplier" (event "_altValueEntity.parameter.evChanged"))
	(var name="_varNameShowDelta" type=bool value="_altValueEntity ? true : _showDelta") 
)

(def macro SCOPE_GET_DELTA_SIGN (_varName:str, _deltaSource:expression)
	(var name="_varName" type=str value="_deltaSource > 0 ? '+' : ''")
)

(def macro SCOPE_GET_DELTA_COLOR (_varName:str, _deltaSource:expression)
	(var name="_varName" type=str value="(_deltaSource > 0) == _positive	? SC.Ui_styles.SERVICE_COLORS.GREEN
																			: SC.Ui_styles.SERVICE_COLORS.RED")
)

(def macro SCOPE_GET_NICE_ROUNDING (_varName:str, _number:expression, _roundNumbers:expression)
	(var name="_varName" type=number value="_number < 1000 ? _roundNumbers : 0")
)

(def macro SCOPE_GET_FORMATTED_NUMBER (_varName:str, _number:expression, _roundNumbers:expression)
	(var name="_varName" type=str value="formatFloatingPoint(round(_number * pow(10, _roundNumbers)) / pow(10, _roundNumbers), _roundNumbers)")
)

(def macro SCOPE_GET_HUMAN_READEABLE_NUMBER (_varName:str, _formattedNumber:expression, _roundNumbers:expression = "0", _numberSign:expression="''")
	(var name="_varName" type=str value="_roundNumbers == 0	? _numberSign + formatSeparator(_formattedNumber)
															: _numberSign + _formattedNumber")
)

(def macro DELTA_RENDERER (_renderer:str, _delta:expression, _positive:expression, _roundNumbers:expression, _showDelta:expression="true")
	(block
		(controller $Instance renderer="_renderer"
			(bind enabled "_showDelta && (_delta > 0.005 || _delta < -0.005)")
			(args
				_delta="_delta" _positive="_positive" _roundNumbers="_roundNumbers"
			)
		)
	)
)

(def macro DELTA_TEXTFIELDS (_deltaColor:expression, _humanReadableDelta:expression, _deltaTextClass:expression = "'$TextTTXLine'")
	(tf
		(class $TextTTXLine)
		(alpha = "TC")
		(style (marginRight = "XXS"))
		(text = '(')
	)
	(tf
		(bind class "_deltaTextClass")
		(alpha = "TA")
		(style
			(marginLeft = "XXS")
			(marginRight = "XXS")
			(bind textColor "_deltaColor")
		)
		(bind text "_humanReadableDelta")
	)
	(tf
		(class $TextTTXLine)
		(alpha = "TC")
		(style (marginRight = "S") (marginLeft = "XXS"))
		(text = ')')
	)
)

(def macro VALUE_TEXTFIELD (_humanReadableValue:expression, _valueTextClass:expression = "'$TextTTXLine'")
	(tf
		(bind class "_valueTextClass")
		(bind text "humanReadableValue")
	)
)

(def macro PREFIX_TEXTFIELD (_prefixIDS:expression)
	(tf
		(bind visible "_prefixIDS")
		(class $TextTTXLine)
		(style
			(marginRight = 6)
		)
		(alpha = "TC")
		(bind text "_prefixIDS")
	)
)

(def macro MEASURE_TEXTFIELD (_measure:expression, _value:expression, _isPluralMeasure:expression="false")
	(block
		(controller $Instance layout = true
			(bind enabled "_measure")
			(exprs
				(tf
					(class $TextTTXLine)
					(style (marginLeft = "6px"))
					(alpha = "TC")
					(bind text "_isPluralMeasure	? trPlural(_measure, _value)
													: _measure")
				)
			)
		)
	)
)





(def layout NumericTTXValue (_valueEntry:gfx, _altValueEntity:gfx="null", _valueConfig:dict = "VALUE_CONFIG.DEFAULT", _showMeasure:bool=true, _showDelta:bool="true")
	(scope
		(macro SCOPE_GET_ALTERNATIVE_VALUE_DELTA 'value' 'delta' 'isShowDelta' "_altValueEntity" "_valueEntry" "_showDelta")
		(macro SCOPE_GET_NICE_ROUNDING 'niceRoundNumbers' "value" "_valueConfig.rounding")
		(macro SCOPE_GET_FORMATTED_NUMBER 'formattedValue' "value" "niceRoundNumbers")
		(macro SCOPE_GET_HUMAN_READEABLE_NUMBER 'humanReadableValue' "formattedValue" "niceRoundNumbers")
	)
	(style (flow = "horizontal"))
	(macro PREFIX_TEXTFIELD _prefixIDS="_valueConfig.prefix")
	(macro DELTA_RENDERER _renderer='NumericTTXDelta' _delta="delta" _positive="_valueConfig.isPositive" _roundNumbers="_valueConfig.rounding" _showDelta="isShowDelta")
	(macro VALUE_TEXTFIELD _humanReadableValue="humanReadableValue")
	(macro MEASURE_TEXTFIELD _measure="_showMeasure ? _valueConfig.measure : null" _value="value" _isPluralMeasure="_valueConfig.isPluralMeasure")
)

(def layout NumericTTXDelta (_delta:gfx, _positive:bool, _roundNumbers:number = 0)
	(scope
		(macro SCOPE_GET_DELTA_SIGN 'deltaSign' "_delta")
		(macro SCOPE_GET_DELTA_COLOR 'deltaColor' "_delta")
		(macro SCOPE_GET_NICE_ROUNDING 'niceRoundNumbers' "_delta" "_roundNumbers")
		(macro SCOPE_GET_FORMATTED_NUMBER 'formattedDelta' "_delta" "niceRoundNumbers")
		(macro SCOPE_GET_HUMAN_READEABLE_NUMBER 'humanReadableDelta' "formattedDelta" "niceRoundNumbers" "deltaSign")
	)
	(style (flow = "horizontal"))
	(macro DELTA_TEXTFIELDS _deltaColor="deltaColor" _humanReadableDelta="humanReadableDelta" _deltaTextClass="'$TextTTXLine'")
)





(def layout PercentTTXValue (_valueEntry:gfx, _altValueEntity:gfx="null", _valueConfig:dict = "VALUE_CONFIG.DEFAULT", _showDelta:bool="true")
	(scope
		(macro SCOPE_GET_ALTERNATIVE_VALUE_DELTA 'value' 'delta' 'isShowDelta' "_altValueEntity" "_valueEntry" "_showDelta" 100)
		(macro SCOPE_GET_NICE_ROUNDING 'niceRoundNumbers' "value" "_valueConfig.rounding")
		(macro SCOPE_GET_FORMATTED_NUMBER 'formattedValue' "value" "niceRoundNumbers")
		(macro SCOPE_GET_HUMAN_READEABLE_NUMBER 'humanReadableValue' "formattedValue" "niceRoundNumbers")
	)
	(style (flow = "horizontal"))
	(macro DELTA_RENDERER _renderer='PercentTTXDelta' _delta="delta" _positive="_valueConfig.isPositive" _roundNumbers="_valueConfig.rounding" _showDelta="_showDelta")
	(macro VALUE_TEXTFIELD _humanReadableValue="humanReadableValue")
	(macro MEASURE_TEXTFIELD _measure="_valueConfig.measure" _value="value" _isPluralMeasure="_valueConfig.isPluralMeasure")
)

(def layout PercentTTXDelta (_delta:gfx, _positive:bool, _roundNumbers:number = 0)
	(scope
		(macro SCOPE_GET_DELTA_SIGN 'deltaSign' "_delta")
		(macro SCOPE_GET_DELTA_COLOR 'deltaColor' "_delta")
		(macro SCOPE_GET_NICE_ROUNDING 'niceRoundNumbers' "_delta" "_roundNumbers")
		(macro SCOPE_GET_FORMATTED_NUMBER 'formattedDelta' "_delta" "niceRoundNumbers")
		(macro SCOPE_GET_HUMAN_READEABLE_NUMBER 'humanReadableDelta' "formattedDelta" "niceRoundNumbers" "deltaSign")
	)
	(style (flow = "horizontal"))
	(macro DELTA_TEXTFIELDS _deltaColor="deltaColor" _humanReadableDelta="humanReadableDelta" _deltaTextClass="'$TextTTXLine'")
)





(def layout IntegralTTXValue (_valueEntry:gfx, _roundNumbers:number = 0, _showDelta:bool="true")
	(scope
		(macro SCOPE_GET_FORMATTED_NUMBER 'formattedValue' "_valueEntry.value" "_roundNumbers")
		(macro SCOPE_GET_HUMAN_READEABLE_NUMBER 'humanReadableValue' "formattedValue" "_roundNumbers")
	)
	(style (flow = "horizontal"))
	(macro DELTA_RENDERER _renderer='IntegralTTXDelta' _delta="_valueEntry.delta" _positive="true" _roundNumbers="_roundNumbers" _showDelta="_showDelta")
	(macro VALUE_TEXTFIELD _humanReadableValue="humanReadableValue" _valueTextClass="'$TextTTXLineBold'")
)

(def layout IntegralTTXDelta (_delta:gfx, _positive:bool, _roundNumbers:number = 0)
	(scope
		(macro SCOPE_GET_DELTA_SIGN 'deltaSign' "_delta")
		(macro SCOPE_GET_DELTA_COLOR 'deltaColor' "_delta")
		(macro SCOPE_GET_FORMATTED_NUMBER 'formattedDelta' "_delta" "_roundNumbers")
		(macro SCOPE_GET_HUMAN_READEABLE_NUMBER 'humanReadableDelta' "formattedDelta" "_roundNumbers" "deltaSign")
	)
	(style (flow = "horizontal"))
	(macro DELTA_TEXTFIELDS _deltaColor="deltaColor" _humanReadableDelta="humanReadableDelta" _deltaTextClass="'$TextTTXLineBold'")
)





(def layout ClassIconTTXValue (_className:gfx)
	(style
		(width = 27px) (height = 27px)
		(bind backgroundImage "'url:../service_kit/ship_classes/icon_default_' + toLower(_className) + '.png'")
	)
)
