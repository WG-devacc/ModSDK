
(def css $ColorStatePlaneLowHP()
	(backgroundColor = 0xFFFF3300)
)
(def css $ColorStatePlaneHalfHP()
	(backgroundColor = 0xFFFF9900)
)
(def css $ColorStatePlaneFullHP()
	(backgroundColor = 0xFF4CE8AA)
)
(def css $ColorStatePlaneDamage()
	(backgroundColor = 0xFFFFFFFF)
)

(def css $TextColorHUDPositivePC ()
	(textColor = 0xFF4CE8AA)
)

(def css $TextColorHUDWarningPC ()
	(textColor = 0xFFFF9933)
)

(def css $TextColorHUDCriticalPC ()
	(textColor = 0xFFFE4D2A)
)

(def css $TextColorHUDDeadPC ()
	(textColor = 0xFF111111)
)

(def css $AirplanesHealthBarAttackerText ()
	(extends $TextDefaultWhiteBold)
	(fontSize = 12)
)

(def constant AircraftHealthbarSettings {
	TOTAL_BAR_WIDTH: 324,
	HP_ATTACKER_PADDING: 22
})

(def element AircraftHealthbar () layout=true
	(scope
		(var ownCarrierEntity:gfx = "$datahub.getSingleEntity(CC.aircarrier)")
		(var aircarrier:gfx = "ownCarrierEntity.aircarrier")
		(var activeSquadron:number = "aircarrier.activeSquadron" (event "aircarrier.evStateChanged"))
		(var ownSquadronEntity:gfx = "$datahub.getPrimaryEntity(CC.ownSquadron, activeSquadron)")

		(var maxPlanes:number = "ownSquadronEntity ? ownSquadronEntity.health.max : 0" (event "ownSquadronEntity.health.evValueChanged"))
		(var currentPlanes:number = "ownSquadronEntity ? ownSquadronEntity.health.value : 0" (event "ownSquadronEntity.health.evValueChanged"))
		(var currentHP_points:number = "ownSquadronEntity ? ownSquadronEntity.squadron.currentHP : 0" (event "ownSquadronEntity.squadron.evCurrentHPChanged"))
		(var maxHP_points:number = "ownSquadronEntity ? ownSquadronEntity.squadron.maxHP : 0" (event "ownSquadronEntity.squadron.evMaxHPChanged"))
		(var healthPercent:number = "maxHP_points ? currentHP_points / maxHP_points : 0")
		(var planeNameIDS:str = "ownSquadronEntity ? ownSquadronEntity.plane.planeNameIDS : ''")
		(var levelRome:str = "ownSquadronEntity ? ownSquadronEntity.plane.levelRome : ''")
		(var ammoType:number = "ownSquadronEntity ? ownSquadronEntity.plane.ammoType : 0")
		(var aircraftCol:gfx = "$datahub.getCollection(CC.aircraft)")
		(var subColName:str = "ownSquadronEntity ? 'bySquadron.'+ ownSquadronEntity.squadron.id : '0'" (event "aircarrier.evStateChanged"))
		(var hpCollection:gfx = "ownSquadronEntity ? aircraftCol.getChildByPath(subColName) : null" (event "aircraftCol.evAdded") (event "aircraftCol.evRemoved"))
		(var hpCount:number = "hpCollection ? hpCollection.items.length : 0" (event "hpCollection.evAdded") (event "hpCollection.evRemoved"))

		(var attackerSize:number = "ownSquadronEntity ? ownSquadronEntity.ownSquadron.attackerSize : 0")
		(var notchesNum:number = "attackerSize ? floor(maxPlanes/attackerSize) : 0")
		(var healthPointWidth:number = "ceil((AircraftHealthbarSettings.TOTAL_BAR_WIDTH - AircraftHealthbarSettings.HP_ATTACKER_PADDING * notchesNum)/max(1, maxPlanes))")

		
		(var planeIconName:str =		"ammoType == SC.Common.PLANE_AMMO_TYPES.PROJECTILE				? 'url:..\battle_hud\markers\plane\controllable\fighter_he_own.png' :
										ammoType == SC.Common.PLANE_AMMO_TYPES.PROJECTILE_AP		? 'url:..\battle_hud\markers\plane\controllable\fighter_ap_own.png' :
										ammoType == SC.Common.PLANE_AMMO_TYPES.BOMB_HE				? 'url:..\battle_hud\markers\plane\controllable\bomber_he_own.png' :
										ammoType == SC.Common.PLANE_AMMO_TYPES.BOMB_AP				? 'url:..\battle_hud\markers\plane\controllable\bomber_ap_own.png' :
										ammoType == SC.Common.PLANE_AMMO_TYPES.TORPEDO				? 'url:..\battle_hud\markers\plane\controllable\torpedo_regular_own.png' :
										ammoType == SC.Common.PLANE_AMMO_TYPES.TORPEDO_DEEPWATER	? 'url:..\battle_hud\markers\plane\controllable\torpedo_deepwater_own.png' :
										ammoType == SC.Common.PLANE_AMMO_TYPES.SKIP_BOMB_HE			? 'url:..\battle_hud\markers\plane\controllable\skip_he_own.png' :
										ammoType == SC.Common.PLANE_AMMO_TYPES.SKIP_BOMB_AP			? 'url:..\battle_hud\markers\plane\controllable\skip_ap_own.png'
																									: ''")
	)
	(style
		(bottom = 128px)
		(position = "absolute")
		(left = 50%)
		(marginLeft = "-AircraftHealthbarSettings.TOTAL_BAR_WIDTH/2")
	)

	(controller $Animation
		(bindcall play duration=0.1 delay=1 from={alpha:0, visible:false} to={alpha:1, visible:true} action="killAll" (bind enabled "currentHP_points > 0"))
		(bindcall play duration=0.1 delay=0.1 from={alpha:1, visible:true} to={alpha:0, visible:false} action="killAll" (bind enabled "!(currentHP_points > 0)"))
	)

	(hblock
		(controller $Repeat renderer='AirplanesHealthPointBg'
			(bind count "maxPlanes")
			(args
				_hpWidth = "healthPointWidth"
				_attackerSize = "attackerSize"
				_maxPlanes = "maxPlanes"
			)
			(exprs
				(scope
					(bind hpWidth "healthPointWidth")
					(bind attackerSize "attackerSize")
					(bind maxPlanes "maxPlanes")
				)
			)
		)
	)

	(block
		(style (position = "absolute"))
		(controller $Repeat renderer='AirplanesHealthBarAttackerId'
			(bind count "notchesNum")
			(exprs
				(scope
					(bind _healthPointWidth "healthPointWidth")
					(bind _attackerSize "attackerSize")
					(bind _isFullAttacker "hpCount > attackerSize * $index")
				)
			)
		)
	)

	(hblock
		(style (position = "absolute") (left = 1px) (top = 1px))
		(controller $Repeat renderer='AirplanesHealthPoint'
			(bind count "hpCount")
			(args
				_col = "hpCollection"
				_hpWidth = "healthPointWidth"
				_attackerSize = "attackerSize"
				_maxPlanes = "maxPlanes"
			)
			(exprs
				(scope
					(bind col "hpCollection")
					(bind hpWidth "healthPointWidth")
					(bind attackerSize "attackerSize")
					(bind maxPlanes "maxPlanes")
				)
			)
		)
	)

	
	(hblock
		(bind visible "currentHP_points ? true : false")
		(style (position = "absolute") (width = 100%) (top = 12px) (hitTest = false))

		
		(block
			(style
				(marginLeft = 1px)
				(marginRight = "S")
				(width = 21px)
				(height = 21px)
				(marginTop = "-XS")
				(bind backgroundImage "planeIconName")
			)
		)

		
		(tf
			(style (width = 200px) (elideMode = true))
			(class $TextDefaultBoldNM)
			(bind text "levelRome + ' ' + planeNameIDS")
		)
		
		(hblock
			(style (position = "absolute") (right = 1px))
			(tf
				(class $TextDefaultBoldNM)
				(class $FontEnableReadability)
				(style (marginRight = 2px))
				(bind class "	healthPercent >= 0.75	? '$TextColorHUDPositivePC' :
								healthPercent >= 0.25	? '$TextColorHUDWarningPC' :
								healthPercent > 0		? '$TextColorHUDCriticalPC'
														: '$TextColorHUDDeadPC'"
				)
				(bind text "formatSeparator(currentHP_points)")
			)
			(tf
				(class $TextDefaultNM)
				(class $FontEnableReadability)
				(alpha = 0.7)
				(bind text "'/' + formatSeparator(maxHP_points)")
			)
		)
	)
)

(def element AirplanesHealthPointBg (_hpWidth:number, _attackerSize:number, _maxPlanes:number) layout=true
	(scope
		(var hpWidth:number = "_hpWidth")
        (var attackerSize:number = "_attackerSize")
        (var maxPlanes:number = "_maxPlanes")
	)
	(style
		(bind marginRight "($index+1)%(max(1,attackerSize)) == 0 && $index < maxPlanes-1 ? AircraftHealthbarSettings.HP_ATTACKER_PADDING: 0")
	)
	(mc hud_bar_bg_sliced
		(style
			(bind width "hpWidth")
		)
	)
)


(def element AirplanesHealthPoint (_col:gfx, _hpWidth:number, _attackerSize:number,_maxPlanes:number) layout=true
	(scope
		(var col:gfx = "_col")
		(var hpWidth:number = "_hpWidth")
		(var attackerSize:number = "_attackerSize")
		(var maxPlanes:number = "_maxPlanes")


		(event evUpdatePrevState)
		(event evPlayAnimationBlink)
		(event emptyEventHack) 

		(var entity:gfx = "col ? col.items[$index] : null" (event "col.evUpdated") (event "col.evMoved") (event "col.evAdded") (event "col.evRemoved"))

		(var healthComponent:gfx = "entity ? entity.health : null" (event "entity.evAdded") (event "entity.evRemoved"))
		(var currentState:number = "healthComponent ? healthComponent.value : 0" (event "healthComponent.evValueChanged"))

		(var airplaneColorStatus:str ="	(currentState	==	0)		? '$ColorStatePlaneFullHP' :
										(currentState	==	1)		? '$ColorStatePlaneHalfHP'
																	: '$ColorStatePlaneLowHP'"
		)

		(var prevState:number = "currentState" watch=false (event "evUpdatePrevState")) 
	)
	(dispatch evPlayAnimationBlink (event "prevState < currentState ? healthComponent.evValueChanged : emptyEventHack"))
	(dispatch evUpdatePrevState (event "evPlayAnimationBlink"))


	(bind class "airplaneColorStatus")

	
	(style
		(height = 2)
		(bind marginRight "($index+1)%max(1,attackerSize) == 0 && $index < maxPlanes - 1 ? AircraftHealthbarSettings.HP_ATTACKER_PADDING + 2: 2")
		(bind width "hpWidth-2")
	)

	
	(block
		(class $FullsizeAbsolute)
		(class $ColorStatePlaneDamage)
		(bind alpha 0)
		(controller $Animation
			(bindcall play duration=0.25 delay=0.0 from={alpha:0} to={alpha:1} action="killAll" (event "evPlayAnimationBlink")) 
			(bindcall play duration=0.25 delay=0.3 from={alpha:1} to={alpha:0} (event "evPlayAnimationBlink"))
		)
	)
)

(def element AirplanesHealthBarAttackerId () layout=true
	(scope
		(var _healthPointWidth:number = 0)
		(var _attackerSize:number = 0)
		(var _isFullAttacker:bool = false)
	)
	(style
		(position = "absolute")
		(top = -8px)
		(bind left "(_healthPointWidth * _attackerSize + AircraftHealthbarSettings.HP_ATTACKER_PADDING) * $index - 10")
	)
	(tf
		(class $AirplanesHealthBarAttackerText)
		(style (align = "right"))
		(bind text "$index + 1")
	)
	(bind alpha "_isFullAttacker ? 0.7 : 0.3")
)


