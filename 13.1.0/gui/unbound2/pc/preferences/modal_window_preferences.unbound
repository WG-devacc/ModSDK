(def constant MISSING_PREF_COMMAND_NAME_HEIGHT 27)

(def constant ROW_TYPE {
	header:		'PrefRowHeader',
	control:	'PrefRowControl',
	keybinding:			'PrefRowKeyBinding',
	keybindingHeader:	'PrefRowKeybindingHeader'
})

(def constant OWNER_MODAL_TYPE {
	main:		'Main',
	secondary:	'Secondary'
})

(def constant SECONDARY_MODAL_WINDOW_TYPE {
	colorBlindness:	'color_blindness',
	crosshairs:		'crosshairs'
})

(def constant CONTROL_TYPE {
	switcher:				'PrefRowControllerSwitcher',
	sliderFloat:			'PrefRowControllerSliderFloat',
	sliderInt:				'PrefRowControllerSliderInt',
	inversedSliderFloat:	'PrefRowControllerSliderFloatInversed',
	itemChooser:			'PrefRowControllerItemChooser',
	modalOpenBtn:			'PrefRowControllerModalOpenBtn'
})

(def constant COLORBLIND_MODE_ON_PARAM_LIST "[
	{ label: 'IDS_COLORBLIND_INTENSITY',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderFloat,	option: 'graphics.postFX.colorblind.intensity',	data: { multiplier: 100 },	isFirstInNestedSection: true }
]")

(def constant GRAPHICS_SETTINGS_PARAM_LIST "[
	{ label: 'IDS_PREFERENCES_GRAPHICS_SECTION_HEADER_COMMON_SETTINGS',	type: ROW_TYPE.header },
	{ label: 'IDS_TEXTURE_QUALITY',						type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'graphics.texture.quality',		isFirstInNestedSection: true },
	{ label: 'IDS_TEXTURE_FILTERING',					type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'graphics.texture.filtering',	data: { maxDropdownHeight: 240 } },
	{ label: 'IDS_FIDELITY_FX_CAS',						type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'graphics.postFX.fidelityFX_CAS' },
	{ label: 'IDS_WEB_BROWSER_HARDWARE_ACCELERATION',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'graphics.browser.hardwareAcceleration' },
	{ label: 'IDS_LOW_QUALITY_GUI',						type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'graphics.GUI.quality' },
	{ label: 'IDS_OPTIONS_CONTRAST_UI',					type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'graphics.GUI.contrast' },

	{ label: 'IDS_PREFERENCES_GRAPHICS_SECTION_HEADER_SMOOTHING',	type: ROW_TYPE.header },
	{ label: 'IDS_MSAA_MODE',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'graphics.msaa.quality',	isFirstInNestedSection: true },
	{ label: 'IDS_SMOOTHING',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'graphics.postFX.fxaa.quality' },
	{ label: 'IDS_TXAA',		type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'graphics.postFX.txaa' },

	{ label: 'IDS_PREFERENCES_GRAPHICS_SECTION_HEADER_ENVIRONMENT',	type: ROW_TYPE.header },
	{ label: 'IDS_SEA_SIMULATION_QUALITY',		type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'graphics.sea.simulation.quality',	isFirstInNestedSection: true },
	{ label: 'IDS_FOREST_QUALITY',				type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'graphics.forest.quality' },
	{ label: 'IDS_FAR_PLANE',					type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'graphics.camera.farPlane' },
	{ label: 'IDS_OBJECT_LOD',					type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'graphics.object.lod' },
	{ label: 'IDS_SEA_REFLECTION_QUALITY',		type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'graphics.sea.reflection.quality' },
	{ label: 'IDS_SCREENSPACE_REFLECTIONS',		type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'graphics.sea.reflection.screenSpace.quality' },

	{ label: 'IDS_PREFERENCES_GRAPHICS_SECTION_HEADER_EFFECTS',	type: ROW_TYPE.header },
	{ label: 'IDS_PARTICLES_PRESET',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,			option: 'graphics.particle.preset',	isFirstInNestedSection: true },
	{ label: 'IDS_PARTICLE_QUALITY',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,			option: 'graphics.particle.quality' },
	{ label: 'IDS_SHADOWS_QUALITY',		type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,			option: 'graphics.shadow.quality' },
	{ label: 'IDS_DYNAMIC_LIGHTING',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,			option: 'graphics.lighting.dynamic.quality' },
	{ label: 'IDS_POST_PROCESSING',		type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,			option: 'graphics.postFX.quality' },
	{ label: 'IDS_GAMELOGIC_PRESET',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,				option: 'graphics.gameLogic.preset' },
	{ label: 'IDS_USE_GUI_EFFECTS',		type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,				option: 'graphics.GUI.effects' },
	{ label: 'IDS_OPTIONS_FOG_ALPHA',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.inversedSliderFloat,	option: 'graphics.fog.alpha' }
]")

(def constant VSYNC_ENABLED_PARAM_LIST "[
	{ label: 'IDS_TRIPLE_BUFFERING',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,	option: 'graphics.tripleBuffering',	isFirstInNestedSection: true, isLastInSection: true }
]")



(def constant LIMITED_SOUND_MIXING_PRESET_PARAM_LIST "[
	{ label: 'IDS_OVERALL_SOUND_EFFECTS_VOLUME',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderFloat,		option: '',	data: { multiplier: 100 },	isFirstInNestedSection: true }
]")

(def constant DETAILED_SOUND_MIXING_PRESET_PARAM_LIST "[
	{ label: 'IDS_OPTIONS_WORLD_VOLUME',			type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderFloat,	option: 'sound.volume.world',	data: { multiplier: 100 }, isFirstInNestedSection: true },
	{ label: 'IDS_OPTIONS_UI_VOLUME',				type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderFloat,	option: 'sound.volume.ui',		data: { multiplier: 100 } },
	{ label: 'IDS_OPTIONS_ENGINES_VOLUME',			type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderFloat,	option: 'sound.volume.engines',	data: { multiplier: 100 } },
	{ label: 'IDS_OPTIONS_SHOOT_VOLUME',			type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderFloat,	option: 'sound.volume.shoot',	data: { multiplier: 100 } },
	{ label: 'IDS_OPTIONS_DAMAGE_VOLUME',			type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderFloat,	option: 'sound.volume.damage',	data: { multiplier: 100 } },
	{ label: 'IDS_OPTIONS_NARROW_DYNAMIC_RANGE',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'sound.narrowDynamicRange' },
	{ label: 'IDS_OPTIONS_TONE_DEFEAT',				type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'sound.toneDefeat' }
]")

(def constant DETAILED_VOICECHAT_PARAM_LIST "[
	{ label: 'IDS_VOICECHAT_OUTPUT_VOLUME',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderInt,	option: 'sound.voice.chat.outputVolume',	isFirstInNestedSection: true },
	{ label: 'IDS_VOICECHAT_INPUT_DEVICE',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'sound.voice.chat.device',			data: { dropdownWidth: 260 } },
	{ label: 'IDS_MICROPHONE_SENSITIVITY',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderInt,	option: 'sound.voice.chat.inputVolume' },
	{ label: 'IDS_VOICECHAT_MODE',			type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'sound.voice.chat.activationMethod' }
]")

(def constant MONITOR_COLORBLIND_DATA "[
	{ label: 'IDS_COLORBLIND_FILTER_MODE',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'graphics.postFX.colorblind.mode',		isLastInSection: true,
		nestedGroups: {
			SC.Ui_prefs.COLORBLIND_MODE.OFF:	[],
				'MODE_ON':	COLORBLIND_MODE_ON_PARAM_LIST
			},
			nestedGroupsRemap: {
				SC.Ui_prefs.COLORBLIND_MODE.DEUTERANOPIA:	'MODE_ON',
				SC.Ui_prefs.COLORBLIND_MODE.PROTANOPIA:		'MODE_ON',
				SC.Ui_prefs.COLORBLIND_MODE.TRITANOPIA:		'MODE_ON'
			}
		}
	]"
)

(def constant PREFS_SCREEN_DATA "[
	{ label: 'IDS_PREFERENCES_SCREEN_SECTION_HEADER_COMMON_SETTINGS',	type: ROW_TYPE.header },
	{ label: 'IDS_MONITOR_TYPE',			type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'monitor.index',	data: { dropdownWidth: 260 } },
	{ label: 'IDS_MONITOR_MODE',			type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'monitor.windowMode' },
	{ label: 'IDS_VIDEO_MODE',				type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'monitor.mode' },
	{ label: 'IDS_OPTION_UI_SCALE',			type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'monitor.uiScale',	data: { isResetable: true } },
	{ label: 'IDS_GAMMA',					type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderFloat,	option: 'graphics.gamma',	data: { isResetable: true, isContextual: true, intervalsCount: 22, floatDigits:2, showZeroes: true } },
	{ label: 'IDS_VERTICAL_SYNHRONIZATION',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'graphics.vsync',	isLastInSection: true,
	  nestedGroups: {
		SC.Ui_prefs.VSYNC.ENABLED:	VSYNC_ENABLED_PARAM_LIST,
		SC.Ui_prefs.VSYNC.DISABLED:	[]
	  }
	},

	{ label: 'IDS_PREFERENCES_SCREEN_SECTION_HEADER_SPECIAL_OPPORTUNITIES',		type: ROW_TYPE.header },
	{ label: 'IDS_MW_OPENER_COLORBLIND_MODE',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.modalOpenBtn,	isLastInSection: true,
	  data: {	modalBtnMethods: [{ type: 'inputMapping.onRequest', name: 'openPrefsModalColorBlindness', args: {} }],
				tooltipInfo: { template: 'PrefRowCommonTooltip' } }
	}
]")

(def constant PREFS_GRAPHICS_DATA "[
	{ label: 'IDS_PREFERENCES_GRAPHICS_SECTION_HEADER_PRESET',	type: ROW_TYPE.header },
	{ label: 'IDS_GRAPHICS_PRESET_SETTINGS',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'graphics.preset',	isLastInSection: true,	data: { maxDropdownHeight: 240 },
		nestedGroups: {
			'GRAPHICS':	GRAPHICS_SETTINGS_PARAM_LIST
		},
		nestedGroupsRemap: {
			SC.Ui_prefs.GRAPHICS_PRESET.MAXIMUM:	'GRAPHICS',
			SC.Ui_prefs.GRAPHICS_PRESET.VERYHIGH:	'GRAPHICS',
			SC.Ui_prefs.GRAPHICS_PRESET.HIGH:		'GRAPHICS',
			SC.Ui_prefs.GRAPHICS_PRESET.MEDIUM:		'GRAPHICS',
			SC.Ui_prefs.GRAPHICS_PRESET.LOW:		'GRAPHICS',
			SC.Ui_prefs.GRAPHICS_PRESET.MINIMUM:	'GRAPHICS',
			SC.Ui_prefs.GRAPHICS_PRESET.USER:		'GRAPHICS'
		},
		nestedHeadersAmount: 4
	}
]")

(def constant PREFS_SOUND_DATA "[
	{ label: 'IDS_PREFERENCES_SOUND_SECTION_HEADER_COMMON_SETTINGS',	type: ROW_TYPE.header },
	{ label: 'IDS_MASTER_VOLUME',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderFloat,	data: { multiplier: 100 },	option: 'sound.volume.master' },
	{ label: 'IDS_MUSIC_DEVICE',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'sound.source' },
	{ label: 'IDS_SOUND_PRESET',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'graphics.sound.quality',	isLastInSection: true },

	{ label: 'IDS_PREFERENCES_SOUND_SECTION_HEADER_MUSIC',	type: ROW_TYPE.header },
	{ label: 'IDS_OPTIONS_DOCK_MUSIC_VOLUME',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderFloat,	data: { multiplier: 100 },	option: 'sound.music.dockVolume' },
	{ label: 'IDS_OPTIONS_BATTLE_MUSIC_VOLUME',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderFloat,	data: { multiplier: 100 },	option: 'sound.music.battleVolume' },
	{ label: 'IDS_MUSIC_MOD',					type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'sound.music.mod',	isLastInSection: true },

	{ label: 'IDS_PREFERENCES_SOUND_SECTION_HEADER_EFFECTS',	type: ROW_TYPE.header },
	{ label: 'IDS_MIXING_PRESET',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'sound.mixingPreset',
	  nestedGroups: {
		SC.Ui_prefs.SOUND_MIXING_PRESET.ORIGINAL:	[],
		SC.Ui_prefs.SOUND_MIXING_PRESET.CINEMATIC:	[],
		SC.Ui_prefs.SOUND_MIXING_PRESET.SIMPLIFIED:	[],
		SC.Ui_prefs.SOUND_MIXING_PRESET.NIGHT:		[],
		SC.Ui_prefs.SOUND_MIXING_PRESET.CUSTOM:		DETAILED_SOUND_MIXING_PRESET_PARAM_LIST
	  }
	},
	{ label: 'IDS_ENABLE_FOGHORN',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,	option: 'sound.foghorn.enabled',	isLastInSection: true },

	{ label: 'IDS_PREFERENCES_SOUND_SECTION_HEADER_VOICEACTING',	type: ROW_TYPE.header },
	{ label: 'IDS_OPTIONS_VOICE_VOLUME',		type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderFloat,		option: 'sound.volume.voice',		data: { multiplier: 100 } },
	{ label: 'IDS_VOICE_PACKAGE',				type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,		option: 'sound.voice.package',		data: { dropdownWidth: 260 } },
	{ label: 'IDS_VOICE_MOD',					type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,		option: 'sound.voice.mod',			data: { dropdownWidth: 260 } },
	{ label: 'IDS_OPTIONS_QUICKCOMMANDS_SOUND',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,			option: 'sound.quickCommands' },
	{ label: 'IDS_OPTIONS_VOICE_OVER_EFFECT',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderFloat,		option: 'sound.voiceOverEffect',	data: { multiplier: 100 },	isLastInSection: true },

	{ label: 'IDS_PREFERENCES_SOUND_SECTION_HEADER_VOICECHAT',	type: ROW_TYPE.header },
	{ label: 'IDS_OPTIONS_ENABLE_VOICECHAT',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,	option: 'sound.voice.chat.enabled',		isLastInSection: true,
	  nestedGroups: {
		SC.Ui_prefs.VOICE_CHAT.ENABLED:		DETAILED_VOICECHAT_PARAM_LIST,
		SC.Ui_prefs.VOICE_CHAT.DISABLED:	[]
	  }
	}
]")

(def constant PREFS_BATTLE_UI_DATA "[
	{ label: 'IDS_CROSSHAIR',	type: ROW_TYPE.header },
	{ label: 'IDS_MW_OPENER_BATTLEUI_CROSSHAIR',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.modalOpenBtn,		isLastInSection: true,
	  data: {	modalBtnMethods: [{ type: 'inputMapping.onRequest', name: 'openPrefsModalCrosshairs', args: {} }],
				tooltipInfo: { template: 'PrefRowCommonTooltip', extraData: { customHeader: 'IDS_MW_OPENER_BATTLEUI_CROSSHAIR_TOOLTIP_HEADER' } } }
	},

	{ label: 'IDS_INTERFACE_OPTIONS',	type: ROW_TYPE.header },
	{ label: 'IDS_ALTERNATE_INTERFACE',						type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'battle.altVision.mode' },
	{ label: 'IDS_SHOWSTATS',								type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'battle.ears.enabled' },
	{ label: 'IDS_SHOW_PERFORMANCE',						type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'ui.showPerformance' },
	{ label: 'IDS_ADDITIONAL_DAMAGE_COUNTERS',				type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'ui.showAdditionalDamageCounters' },
	{ label: 'IDS_ENABLE_BATTLE_CHAT',						type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'ui.enableBattleChat',	isLastInSection: true },

	{ label: 'IDS_PREFERENCES_BATTLEUI_SECTION_HEADER_INDICATORS',	type: ROW_TYPE.header },
	{ label: 'IDS_TERRAIN_SHOOT_INDICATOR',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'battle.terrain.shooting.mode' },
	{ label: 'IDS_SIMULTANEOUS_RELOAD',		type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'battle.weapon.indicator.simultaneousReload' },
	{ label: 'IDS_OPTIONS_ALWAYS_SHOW_MODIFIERS_TIMERS',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher, 	option: 'ui.alwaysShowModifiersTimers',	isLastInSection: true }
]")

(def constant PREFS_CAMERA_DATA "[
	{ label: 'IDS_PREFERENCES_CAMERA_SECTION_HEADER_POSITION',	type: ROW_TYPE.header },
	{ label: 'IDS_OPTIONS_FOV',				type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderFloat,	option: 'battle.camera.fov',	data: { isResetable: true, intervalsCount: 100, multiplier: 100 } },
	{ label: 'IDS_OPTIONS_CAMERA_HEIGHT',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderFloat,	option: 'battle.camera.height',	data: { isResetable: true, intervalsCount: 20, isContextual: true, multiplier: 10, showZeroes:false },	isLastInSection: true },

	{ label: 'IDS_PREFERENCES_CAMERA_SECTION_HEADER_BEHAVIOUR',	type: ROW_TYPE.header },
	{ label: 'IDS_OPTIONS_FOLLOW_TARGET',						type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'battle.camera.autoTrackTarget.enabled' },
	# { label: 'IDS_OPTIONS_AMMUNTION_GROUP_CAMERA',				type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'battle.camera.wheelTransition.enabled' },
	{ label: 'IDS_OPTIONS_AUTO_MAINGUN_CAMERA_SWITCH',			type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'battle.camera.autoChangePosition.enabled' },
	{ label: 'IDS_OPTIONS_RESTORE_CAMERA_AFTER_OVERVIEW_MODE',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'battle.camera.observeYawRestore.enabled' },
	{ label: 'IDS_OPTIONS_CAMERA_DAMAGE_FEEDBACK',				type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'battle.camera.damageEffect.enabled',	isLastInSection: true }
]")

(def constant PREFS_MOUSE_DATA "[
	{ label: 'IDS_PREFERENCES_MOUSE_SECTION_HEADER_MOUSE',	type: ROW_TYPE.header },
	{ label: 'IDS_OPTIONS_MOUSE_SENSITIVITY',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderFloat,	option: 'ui.mouse.sensivity',		data: { isResetable: true, isContextual: true } },
	{ label: 'IDS_OPTIONS_WHEEL_SENSITIVITY',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderFloat,	option: 'ui.mouse.wheelSensivity',	data: { isResetable: true, isContextual: true } },
	{ label: 'IDS_OPTIONS_INVERT_Y',			type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'battle.camera.signY.inverted',		isLastInSection: true }
]")

(def constant PREFS_OTHER_DATA "[
	{ label: 'IDS_PREFERENCES_OTHER_SECTION_HEADER_ADDITIONAL_SETTINGS',	type: ROW_TYPE.header },
	{ label: 'IDS_COLLISION_AUTOPILOT',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'battle.autoPilot.mode' },
	{ label: 'IDS_PORT_CLOCK',			type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'ui.showPortClock' },
	{ label: 'IDS_SKIP_VIDEO',			type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'ui.skipVideo' },
	{ label: 'IDS_SHOW_IMELANGBAR',		type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'ui.enableLanguageBar',		isLastInSection: true }
]")


(def constant PREFS_KEYBINDINGS_SHIPS_DATA "[
	{ label: 'IDS_PREFERENCES_KEYBINDINGS_SECTION_HEADER_SHIPS_MOVEMENT',	type: ROW_TYPE.keybindingHeader,	isKeybindingRelated: true },
	{ commandId: Cmd.CRUISE_SPEED_UP,		type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CRUISE_SPEED_DOWN,		type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_MOVE_LEFT,			type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_MOVE_RIGHT,		type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CRUISE_ANGLE_LEFT,		type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CRUISE_ANGLE_RIGHT,	type: ROW_TYPE.keybinding,	isLastInSection: true },

	{ label: 'IDS_PREFERENCES_KEYBINDINGS_SECTION_HEADER_SHIPS_WEAPON',		type: ROW_TYPE.keybindingHeader,	isKeybindingRelated: true },
	{ commandId: Cmd.CMD_SHOOT,						type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_CINEMATIC_SHOOT,			type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_AMMO_SLOT_1,				type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_AMMO_SLOT_2,				type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_AMMO_SLOT_3,				type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_AMMO_SLOT_4,				type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_AMMO_SLOT_5,				type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_AMMO_SLOT_6,				type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_AMMO_SLOT_7,				type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_AMMO_SLOT_8,				type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_AMMO_SLOT_G,				type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_FIXING_TARGET_POSITION,	type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_ABSOLUTE_GUNS_LOCK,		type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_RELATIVE_GUNS_LOCK,		type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_SET_PRIORITY_SECTOR,		type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_SWITCH_ATBA_AIRDEFENSE,	type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_ACTIVATE_RAGE_MODE,		type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_TOGGLE_FIRE_MODE ,			type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_TORPEDO_RELOAD,			type: ROW_TYPE.keybinding,	isLastInSection: true },

	{ label: 'IDS_PREFERENCES_KEYBINDINGS_SECTION_HEADER_SHIPS_CONSUMABLES',	type: ROW_TYPE.keybindingHeader,	isKeybindingRelated: true },
	{ commandId: Cmd.CMD_CONSUMABLE_0,			type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_CONSUMABLE_1,			type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_CONSUMABLE_2,			type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_CONSUMABLE_3,			type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_CONSUMABLE_4,			type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_FOGHORN,				type: ROW_TYPE.keybinding,	isLastInSection: true },

	{ label: 'IDS_PREFERENCES_KEYBINDINGS_SECTION_HEADER_SHIPS_SUBMARINE',	type: ROW_TYPE.keybindingHeader,	isKeybindingRelated: true },
	{ commandId: Cmd.CRUISE_DEEP_UP,			type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CRUISE_DEEP_DOWN,			type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_DEACTIVATE_PING,		type: ROW_TYPE.keybinding,	isLastInSection: true },

	{ label: 'IDS_PREFERENCES_KEYBINDINGS_SECTION_HEADER_SHIPS_CAMERA',		type: ROW_TYPE.keybindingHeader,	isKeybindingRelated: true },
	{ commandId: Cmd.CMD_ART_CAMERA,			type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_TRACK_OBJECT_CAMERA,	type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_SWITCH_CAMERA,			type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_OBSERVE_CAMERA,		type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_FREE_CURSOR,			type: ROW_TYPE.keybinding,	isLastInSection: true },

	{ label: 'IDS_PREFERENCES_KEYBINDINGS_SECTION_HEADER_SHIPS_BATTLEUI',	type: ROW_TYPE.keybindingHeader,	isKeybindingRelated: true },
	{ commandId: Cmd.CMD_ICONS,				type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_HIDE_INTERFACE,	type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_GAME_STATS,		type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_HELP,				type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_SHIP_PARAMS,		type: ROW_TYPE.keybinding,	isLastInSection: true },

	{ label: 'IDS_PREFERENCES_KEYBINDINGS_SECTION_HEADER_SHIPS_TACTICAL_TABLET',	type: ROW_TYPE.keybindingHeader,	isKeybindingRelated: true },
	{ commandId: Cmd.CMD_TACTICAL_MAP,		type: ROW_TYPE.keybinding },
	{ commandId: Cmd.MAP_SCALE_PLUS,		type: ROW_TYPE.keybinding },
	{ commandId: Cmd.MAP_SCALE_MINUS,		type: ROW_TYPE.keybinding,	isLastInSection: true }
]")

(def constant PREFS_KEYBINDINGS_AVIATION_DATA "[
	{ label: 'IDS_PREFERENCES_KEYBINDINGS_SECTION_HEADER_AVIATION_CARRIER',		type: ROW_TYPE.keybindingHeader,	isKeybindingRelated: true },
	{ commandId: Cmd.CMD_AIRCARRIER_SLOT_1,		type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_AIRCARRIER_SLOT_2,		type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_AIRCARRIER_SLOT_3,		type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_AIRCARRIER_SLOT_4,		type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_AIRCARRIER_SLOT_5,		type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_AIRCARRIER_SLOT_6,		type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_AIRCARRIER_SLOT_7,		type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_AIRCARRIER_SLOT_8,		type: ROW_TYPE.keybinding,	isLastInSection: true },

	{ label: 'IDS_PREFERENCES_KEYBINDINGS_SECTION_HEADER_AVIATION_CONTROL',		type: ROW_TYPE.keybindingHeader,	isKeybindingRelated: true },
	{ commandId: Cmd.CMD_THROTTLE_UP,		type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_THROTTLE_DOWN,		type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_TURN_LEFT,			type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_TURN_RIGHT,		type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_LAND,				type: ROW_TYPE.keybinding,	isLastInSection: true },
	
	{ label: 'IDS_PREFERENCES_KEYBINDINGS_SECTION_HEADER_AVIATION_WEAPON',	type: ROW_TYPE.keybindingHeader,	isKeybindingRelated: true },
	{ commandId: Cmd.CMD_WEAPON_0,			type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_WEAPON_1,			type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_SHOOT_PLANE,		type: ROW_TYPE.keybinding,	isLastInSection: true },

	{ label: 'IDS_PREFERENCES_KEYBINDINGS_SECTION_HEADER_AVIATION_CONSUMABLES',		type: ROW_TYPE.keybindingHeader,	isKeybindingRelated: true },
	{ commandId: Cmd.CMD_AIRPLANE_CONSUMABLE_0,		type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_AIRPLANE_CONSUMABLE_1,		type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_AIRPLANE_CONSUMABLE_2,		type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_AIRPLANE_CONSUMABLE_3,		type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_AIRPLANE_CONSUMABLE_4,		type: ROW_TYPE.keybinding,	isLastInSection: true }
]")

(def constant PREFS_KEYBINDINGS_CHAT_DATA "[
	{ label: 'IDS_PREFERENCES_KEYBINDINGS_SECTION_HEADER_CHAT_ENABLE',		type: ROW_TYPE.keybindingHeader,	isKeybindingRelated: true },
	{ commandId: Cmd.CMD_ENABLE_BATTLE_CHAT,	type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_VOICE_CHAT_TALK,		type: ROW_TYPE.keybinding,	isLastInSection: true },

	{ label: 'IDS_PREFERENCES_KEYBINDINGS_SECTION_HEADER_CHAT_QUICK_COMMANDS',	type: ROW_TYPE.keybindingHeader,	isKeybindingRelated: true },
	{ commandId: Cmd.CMD_QUICK_COMMANDS_WINDOW,		type: ROW_TYPE.keybinding,	customTooltipHeader: 'IDS_CMD_QUICK_COMMANDS_WINDOW_PREF_TOOLTIP_HEADER' },
	{ commandId: Cmd.CMD_QUICK_NO_WAY,				type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_QUICK_TACTIC,				type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_QUICK_AYE_AYE,				type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_QUICK_NEED_SUPPORT,		type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_QUICK_NEED_AIR_DEFENCE,	type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_QUICK_NEED_VISION,			type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_QUICK_NEED_SMOKE,			type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_QUICK_BACK,				type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_QUICK_GOOD_LUCK,			type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_QUICK_GOOD_GAME,			type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_QUICK_THANK_YOU,			type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_QUICK_CARAMBA,				type: ROW_TYPE.keybinding,	isLastInSection: true },

	{ label: 'IDS_PREFERENCES_KEYBINDINGS_SECTION_HEADER_CHAT_DIVISIONS',		type: ROW_TYPE.keybindingHeader,	isKeybindingRelated: true },
	{ commandId: Cmd.CMD_DIVISION_INVITATION_ACCEPT,	type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_DIVISION_INVITATION_DECLINE,	type: ROW_TYPE.keybinding,	isLastInSection: true }
]")

(def constant PREFS_KEYBINDINGS_SPECTATOR_DATA "[
	{ label: 'IDS_PREFERENCES_KEYBINDINGS_SECTION_HEADER_SPECTATOR_MODE_CONTROL',	type: ROW_TYPE.keybindingHeader,	isKeybindingRelated: true },
	{ commandId: Cmd.CMD_SPECTATOR_HOTKEYS,			type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_ZOOM_IN,					type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_ZOOM_OUT,					type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_CAMERA_MOVE_UP,			type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_CAMERA_MOVE_DOWN,			type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_CAMERA_MOVE_LEFT,			type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_CAMERA_MOVE_RIGHT,			type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_NEXT_ALLIED_VEHICLE,		type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_PREV_ALLIED_VEHICLE,		type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_SELECTED_ALLIED_VEHICLE,	type: ROW_TYPE.keybinding },
	{ commandId: Cmd.CMD_SWITCH_CAMERA_SPECTATE,	type: ROW_TYPE.keybinding,	isLastInSection: true }
]")

(def constant PREFS_LISTS "{
	SC.Ui_windows.ROUTE.MONITOR:	PREFS_SCREEN_DATA,
	SC.Ui_windows.ROUTE.GRAPHICS:	PREFS_GRAPHICS_DATA,
	SC.Ui_windows.ROUTE.SOUND:		PREFS_SOUND_DATA,
	SC.Ui_windows.ROUTE.BATTLE:		PREFS_BATTLE_UI_DATA,
	SC.Ui_windows.ROUTE.CAMERA:		PREFS_CAMERA_DATA,
	SC.Ui_windows.ROUTE.MOUSE:		PREFS_MOUSE_DATA,
	SC.Ui_windows.ROUTE.CONTROLS:	PREFS_KEYBINDINGS_SHIPS_DATA,
	SC.Ui_windows.ROUTE.OTHER:		PREFS_OTHER_DATA
}")

(def constant KEYBINDINGS_DICT "{
	SC.Ui_windows.ROUTE.CONTROLS_SHIPS:		PREFS_KEYBINDINGS_SHIPS_DATA,
	SC.Ui_windows.ROUTE.CONTROLS_AVIATION:	PREFS_KEYBINDINGS_AVIATION_DATA,
	SC.Ui_windows.ROUTE.CONTROLS_CHAT:		PREFS_KEYBINDINGS_CHAT_DATA,
	SC.Ui_windows.ROUTE.CONTROLS_SPECTATOR:	PREFS_KEYBINDINGS_SPECTATOR_DATA
}")


(def css $PrefsPageTopButtonContainer ()
	(align = "right")
	(width = 100%)
	(marginBottom = 1)
	(paddingRight = "PREF_ROW_SIDE_PADDING + M")
)

(def css $PrefsMainLayoutWrapper ()
	(height = 100%)
	(paddingTop = "LM")
)

(def css $PrefsNestedAsideLowerButtonsContainer ()
	(position = "absolute")
	(bottom = 0)
	(align = "center")
	(width = 100%)
)

(def element ModalWindowPreferences () dispatch_size_change=true
	(macro MODAL_WINDOW_INIT)
	(macro MODAL_WINDOW_BG)

	(scope
		(event evNavBtnClicked)
		(event evScrollKeybindingsToBegin)

		(event evShowDiffBtn)
		(event evHideDiffBtn)
		(event evDefaultDiffAppear)
		(event evSliderDiffAppear)
		(event evDefaultDiffDisappear)
		(event evSliderDiffDisappear)

		(event evSliderThumbMouseDown)
		(event evSliderThumbMouseUp)

		(macro PULL_ACTIVE_CHILD_ROUTE
			_nodeId = "SC.Ui_windows.MODAL.PREFERENCES"
			_fieldActiveChild = "'currentPrefRoute'"
		)

		(var preferenceDeltaCollection:gfx = "$datahub.getCollection(CC.preferenceDelta)")
		(var mainDiffCollection:gfx = "preferenceDeltaCollection.getChildByPath('byLevel.' + 0)")
		(var diffItems:array = "mainDiffCollection.items" (event "mainDiffCollection.evAdded") (event "mainDiffCollection.evRemoved"))
		(var isAnyDiff:bool = "diffItems.length > 0")

		(var isAnySliderThumbDown:bool = false)
		(bind isAnySliderThumbDown "true" init=false watch=false (event "evSliderThumbMouseDown"))
		(bind isAnySliderThumbDown "false" init=false watch=false (event "evSliderThumbMouseUp"))

		(var diffItemsUponSliderThumbInit:array = "diffItems" init=false watch=false (event "evSliderThumbMouseDown"))

		(var currentlyEditingCommandWatcher:gfx = "$datahub.getFirstWatcher(CC.currentlyEditingCommand)")
		(var currentlyEditingCommandEntity:gfx = "currentlyEditingCommandWatcher.entity" (event "currentlyEditingCommandWatcher.event"))
		(var commandMappingCommandComponent:gfx = "currentlyEditingCommandEntity ? currentlyEditingCommandEntity.commandMappingCommand : null")
		(var currentlyEditingCommandMappingId:number = "commandMappingCommandComponent ? commandMappingCommandComponent.id : null" (event "commandMappingCommandComponent.evChanged"))
		(var currentlyEditingCommandComponent:gfx = "currentlyEditingCommandEntity ? currentlyEditingCommandEntity.currentlyEditingCommand : null")
		(var currentlyEditingCommandIndex:number = "currentlyEditingCommandComponent ? currentlyEditingCommandComponent.index : null" (event "currentlyEditingCommandComponent.evChanged"))
	)

	(dispatch evScrollKeybindingsToBegin dir="EventDirection.DOWN" (event "evNavBtnClicked"))

	(dispatch evDefaultDiffAppear dir="EventDirection.NONE" (bind trigger "isAnyDiff") (bind enabled "diffItems.length == 0 && !isAnySliderThumbDown"))
	(dispatch evSliderDiffAppear dir="EventDirection.NONE" (bind enabled "(diffItems.length > 0) && (diffItemsUponSliderThumbInit.length == 0)") (event "evSliderThumbMouseUp"))
	(dispatch evDefaultDiffDisappear dir="EventDirection.NONE" (bind trigger "isAnyDiff") (bind enabled "diffItems.length > 0 && !isAnySliderThumbDown"))
	(dispatch evSliderDiffDisappear dir="EventDirection.NONE" (bind enabled "(diffItems.length == 0) && (diffItemsUponSliderThumbInit.length > 0)") (event "evSliderThumbMouseUp"))

	(dispatch evShowDiffBtn dir="EventDirection.NONE" (event "evDefaultDiffAppear") (event "evSliderDiffAppear"))
	(dispatch evHideDiffBtn dir="EventDirection.NONE" (event "evDefaultDiffDisappear") (event "evSliderDiffDisappear"))

	(block
		(macro DEFAULT_MODAL_WINDOW_ANIMATION 1)
		(style (width = 100%))

		(element ModalWindowHeaderFullSize
			_windowName = 'IDS_MODAL_WINDOW_TITLE_PREFERENCES'
			_paddingRight = "M"
			_paddingLeft = "M"
		)
	)

	(block
		(class $Fullsize)
		(style
			(paddingBottom = "XXL")
			(flow = "horizontal")
		)
		
		(block
			(macro DEFAULT_MODAL_WINDOW_ANIMATION 2)
			(style (position = "absolute"))

			(element PrefsNavigationPanel
				_selectedPage = "currentPrefRoute"
				(style
					(position = "absolute")
					(width = 240px)
					(paddingTop = "LM")
				)
			)
		)

		(block
			(macro DEFAULT_MODAL_WINDOW_ANIMATION 3)
			(class $Fullsize)

			(element PrefsMainContent
				_selectedPage = "currentPrefRoute"
				_currentlyEditingCommandMappingId = "currentlyEditingCommandMappingId"
				_currentlyEditingCommandIndex = "currentlyEditingCommandIndex"
			)
		)
	)

	
	(block
		(style
			(position = "absolute")
			(align = "center")
			(width = 100%)
			(bottom = "XLL")
		)

		(block
			(macro DEFAULT_MODAL_WINDOW_ANIMATION 4)
			(style (width = 376px))

			(block
				(style
					(position = "absolute")
					(bind alpha "isAnyDiff ? 1 : 0" watch=false)
				)

				(element DefaultButton
					_name = "'btn_apply'"
					_enabled = true
					_size = "SIZE.MEDIUM"
					_width = 180
					_label = 'IDS_APPLY'
				)

				(controller $Animation
					(bindcall play
						duration	= 0.1
						delay		= 0.1
						to			= "{ alpha: 1}"
						action	 ="kill"
						(event "evShowDiffBtn")
					)
					(bindcall play
						duration	= 0.1
						delay		= 0.1
						to			= "{ alpha: 0}"
						action	 ="kill"
						(event "evHideDiffBtn")
					)
				)
			)

			(block
				(style
					(position = "absolute")
					(bind left "isAnyDiff ? 196px : 98px" watch=false)
				)

				(element DefaultButton
					_name = "'btn_cancel'"
					_enabled = true
					_size = "SIZE.MEDIUM"
					_width = 180
					_label = 'IDS_CLOSE_BTN'
				)

				(controller $Animation
					(bindcall play
						duration	= 0.1
						delay		= 0.1
						to			 = "{ left: 196 }"
						action		="kill"
						(event "evShowDiffBtn")
					)
					(bindcall play
						duration	= 0.1
						delay		= 0.1
						to			= "{ left: 98 }"
						action		="kill"
						(event "evHideDiffBtn")
					)
				)
			)
		)
	)
)

(def element PrefsNavigationPanel (_selectedPage:str)
	(style (width = 100%))

	(controller $Repeat count="SC.Ui_windows.ROUTE.OPTIONS_PAGES.length" renderer='AsideNavigationButton'
		(args
			_label = "'IDS_PREFERENCES_PAGENAME_' + toUpper(SC.Ui_windows.ROUTE.OPTIONS_PAGES[$index])"
			_isSelected = "SC.Ui_windows.ROUTE.OPTIONS_PAGES[$index] == _selectedPage"
			_dispatchedEv = "'evNavBtnClicked'"
			_methods = "[{ type: 'inputMapping.onAction', name: 'navigateTo', args: { route: SC.Ui_windows.ROUTE.OPTIONS_PAGES[$index] } }]"
		)
	)
)

(def element PrefsMainContent (_selectedPage:str, _currentlyEditingCommandMappingId:number, _currentlyEditingCommandIndex:number)
	(class $Fullsize)
	(style (align = "center"))

	
		
		
		
		
		
		
		

		
		
		
	
	
	(controller $Instance renderer='PrefsMainContentCommon'
		(bind enabled "_selectedPage == SC.Ui_windows.ROUTE.MONITOR")
		(args
			_selectedPage	= "_selectedPage"
		)
	)
	(controller $Instance renderer='PrefsMainContentCommon'
		(bind enabled "_selectedPage == SC.Ui_windows.ROUTE.GRAPHICS")
		(args
			_selectedPage	= "_selectedPage"
		)
	)
	(controller $Instance renderer='PrefsMainContentCommon'
		(bind enabled "_selectedPage == SC.Ui_windows.ROUTE.SOUND")
		(args
			_selectedPage	= "_selectedPage"
		)
	)
	(controller $Instance renderer='PrefsMainContentCommon'
		(bind enabled "_selectedPage == SC.Ui_windows.ROUTE.BATTLE")
		(args
			_selectedPage	= "_selectedPage"
		)
	)
	(controller $Instance renderer='PrefsMainContentCommon'
		(bind enabled "_selectedPage == SC.Ui_windows.ROUTE.CAMERA")
		(args
			_selectedPage	= "_selectedPage"
		)
	)
	(controller $Instance renderer='PrefsMainContentCommon'
		(bind enabled "_selectedPage == SC.Ui_windows.ROUTE.MOUSE")
		(args
			_selectedPage	= "_selectedPage"
		)
	)
	(controller $Instance renderer='PrefsMainContentKeybindings'
		(bind enabled "_selectedPage == SC.Ui_windows.ROUTE.CONTROLS")
		(args
			_selectedPage	= "_selectedPage"
			_currentlyEditingCommandMappingId	= "_currentlyEditingCommandMappingId"
			_currentlyEditingCommandIndex		= "_currentlyEditingCommandIndex"
		)
	)
	(controller $Instance renderer='PrefsMainContentCommon'
		(bind enabled "_selectedPage == SC.Ui_windows.ROUTE.OTHER")
		(args
			_selectedPage	= "_selectedPage"
		)
	)
)

(def element PrefsMainContentCommon (_selectedPage:str)
	(scope
		(event evScrollAreaValueChanged)
		(event evCloseDropdownByOuterEvent)

		(var stageComponent:gfx = "$datahub.getSingleEntity(CC.stage).stage")
		(var stageWidth:number = "stageComponent.width" (event "stageComponent.evStageSizeChanged"))
		(var contentWidth:number = "stageWidth > 1366 ? 800 : 720")

		(var data:array	= "PREFS_LISTS[_selectedPage]")
		(var resetBtnLabel:str = "_selectedPage == SC.Ui_windows.ROUTE.GRAPHICS	? 'IDS_PREFS_AUTODETECT_BUTTON'
																				: 'IDS_PREFS_RESET_PAGE_BUTTON'")
	)

	(class $PrefsMainLayoutWrapper)
	(style (bind width "contentWidth + PREF_ROW_SIDE_PADDING * 2"))

	(scrollArea
		(class $Fullsize)
		
		
		(style (backgroundColor = 0x01000000))

		(verticalSlider='ScrollBarVLightWithValueChangedEvent')

		(topShadow='ScrollAreaShadowTop')
		(bottomShadow='ScrollAreaShadowBottom')

		(wheelScrollSpeed = "1.0")
		(wheelScrollAcceleration = "1")
		(maxScrollingAnimatedDistance = "50")

		(hscrollPolicy='off')
		(vscrollPolicy='auto')

		(drag=false)

		(content
			(style (bind width "contentWidth + PREF_ROW_SIDE_PADDING * 2"))

			(block
				(class $PrefsPageTopButtonContainer)

				(element DefaultButton
					_name = "'btn_defaults'"
					_type = "SC.Ui_styles.BUTTON_TYPE.SECONDARY"
					_size = "SIZE.SMALL"
					_label = "resetBtnLabel"
					_focusIndex = 1
					_tooltipText = "'IDS_PREFS_COMMONPAGE_RESET_' + toUpper(_selectedPage) + '_TOOLTIP'"
				)
			)

			(block
				(style (width = 100%) (marginBottom = "L"))

				(controller $Repeat renderer='PrefRow'
					(bind count "data.length")
					(args
						_ownerModal = "OWNER_MODAL_TYPE.main"
						_data = "data[$index]"
					)
				)
			)
		)

		(bindcall scrollToBegin animated=false (bind trigger "_selectedPage"))
		(dispatch evCloseDropdownByOuterEvent dir="EventDirection.DOWN" (event "evScrollAreaValueChanged"))
	)
)

(def element PrefsMainContentKeybindings (_selectedPage:str, _currentlyEditingCommandMappingId:number, _currentlyEditingCommandIndex:number)
	(scope
		(event evScrollAreaValueChanged)
		(event evScrollKeybindingsToBegin)
		(event evCloseKeyAssignmentTooltipByScroll)

		(macro PULL_ACTIVE_CHILD_ROUTE
			_nodeId = "SC.Ui_windows.ROUTE.CONTROLS"
			_fieldActiveChild = "'currentControlRoute'"
		)

		(var stageComponent:gfx = "$datahub.getSingleEntity(CC.stage).stage")
		(var stageWidth:number = "stageComponent.width" (event "stageComponent.evStageSizeChanged"))
		(var contentWidth:number = "stageWidth > 1366 ? 800 : 720")

		(var keybindingsList:array = "	currentControlRoute == SC.Ui_windows.ROUTE.CONTROLS_SHIPS		? PREFS_KEYBINDINGS_SHIPS_DATA :
										currentControlRoute == SC.Ui_windows.ROUTE.CONTROLS_AVIATION	? PREFS_KEYBINDINGS_AVIATION_DATA :
										currentControlRoute == SC.Ui_windows.ROUTE.CONTROLS_CHAT		? PREFS_KEYBINDINGS_CHAT_DATA
																										: PREFS_KEYBINDINGS_SPECTATOR_DATA")

		(var commandMappingOrphansCollection:gfx = "$datahub.getCollection(CC.commandMappingCommand).getChildByPath('orphans')")
		(var orphans:array = "commandMappingOrphansCollection.items" (event "commandMappingOrphansCollection.evAdded") (event "commandMappingOrphansCollection.evRemoved"))
	)

	(class $PrefsMainLayoutWrapper)
	(style (flow = "horizontal"))

	(block
		(style
			(bind width "contentWidth + PREF_ROW_SIDE_PADDING * 2")
			(height = 100%)
		)

		(block
			(style
				(flow = "horizontal")
				(width = 100%)
				(paddingLeft = "PREF_ROW_SIDE_PADDING")
				(paddingRight = "PREF_ROW_SIDE_PADDING")
				(marginBottom = "XS")
			)

			(element SecondaryTabButton
				_label = "'IDS_PREFERENCES_KEYBINDINGS_TAB_SHIPS'"
				_isSelected = "currentControlRoute == SC.Ui_windows.ROUTE.CONTROLS_SHIPS"
				_methods = "[{	type: 'inputMapping.onAction',
								name: 'navigateTo',
								args: { route: SC.Ui_windows.ROUTE.CONTROLS_SHIPS } }]"
			)

			(element SecondaryTabButton
				_label = "'IDS_PREFERENCES_KEYBINDINGS_TAB_AVIATION'"
				_isSelected = "currentControlRoute == SC.Ui_windows.ROUTE.CONTROLS_AVIATION"
				_methods = "[{	type: 'inputMapping.onAction',
								name: 'navigateTo',
								args: { route: SC.Ui_windows.ROUTE.CONTROLS_AVIATION } }]"
			)

			(element SecondaryTabButton
				_label = "'IDS_PREFERENCES_KEYBINDINGS_TAB_CHAT'"
				_isSelected = "currentControlRoute == SC.Ui_windows.ROUTE.CONTROLS_CHAT"
				_methods = "[{	type: 'inputMapping.onAction',
								name: 'navigateTo',
								args: { route: SC.Ui_windows.ROUTE.CONTROLS_CHAT } }]"
			)

			(element SecondaryTabButton
				_label = "'IDS_PREFERENCES_KEYBINDINGS_TAB_SPECTATOR_MODE'"
				_isSelected = "currentControlRoute == SC.Ui_windows.ROUTE.CONTROLS_SPECTATOR"
				_methods = "[{	type: 'inputMapping.onAction',
								name: 'navigateTo',
								args: { route: SC.Ui_windows.ROUTE.CONTROLS_SPECTATOR } }]"
			)

			(element HorizontalDividerTwoPx
				(style
					(position = "absolute")
					(width = 100%)
					(bottom = 0)
				)
			)
		)

		(scrollArea
			(class $Fullsize)
			
			
			(style (backgroundColor = 0x01000000))

			(verticalSlider='ScrollBarVLightWithValueChangedEvent')

			(topShadow='ScrollAreaShadowTop')
			(bottomShadow='ScrollAreaShadowBottom')

			(hscrollPolicy='off')
			(vscrollPolicy='auto')

			(drag=false)

			(repeatController='keybindingsList')

			(content
				(style
					(bind width "contentWidth + PREF_ROW_SIDE_PADDING * 2")
					(paddingTop = "M")
				)

				(block
					(class $PrefsPageTopButtonContainer)

					(element DefaultButton
						_name = "'btn_command_defaults'"
						_type = "SC.Ui_styles.BUTTON_TYPE.SECONDARY"
						_size = "SIZE.SMALL"
						_label = 'IDS_PREFS_RESET_PAGE_BUTTON'
						_focusIndex = 1
						_tooltipText = "'IDS_PREFS_KEYBINDINGS_RESET_' + toUpper(currentControlRoute) + '_TOOLTIP'"
					)
				)

				(block
					(style (width = 100%) (marginBottom = "L"))

					(controller $Repeat renderer='BindingPagePrefRow' name='keybindingsList'
						(bind enabled "keybindingsList.length")
						(bind count "keybindingsList.length")
						(itemWidth = "contentWidth + PREF_ROW_SIDE_PADDING * 2")
						(itemHeight = "PREF_ROW_SIZES.SINGLELINE_HEIGHT")
						(itemOffset = 0)
						(args
							_data = "keybindingsList[$index]"
							_currentlyEditingCommandMappingId	= "_currentlyEditingCommandMappingId"
							_currentlyEditingCommandIndex		= "_currentlyEditingCommandIndex"
						)
					)
				)
			)

			(bindcall scrollToBegin animated=false (event "evScrollKeybindingsToBegin") (bind trigger "currentControlRoute"))
			(dispatch evCloseKeyAssignmentTooltipByScroll dir="EventDirection.DOWN" (event "evScrollAreaValueChanged"))
		)
	)

	(controller $Instance renderer='PrefsMissingKeybindings'
		(bind enabled "orphans.length")
	)
)

(def element PrefsMissingKeybindings ()
	(scope
		(var commandMappingOrphansCollection:gfx = "$datahub.getCollection(CC.commandMappingCommand).getChildByPath('orphans')")
		(var orphans:array = "commandMappingOrphansCollection.items" (event "commandMappingOrphansCollection.evAdded") (event "commandMappingOrphansCollection.evRemoved"))

		(var stageComponent:gfx = "$datahub.getSingleEntity(CC.stage).stage")
		(var stageWidth:number = "stageComponent.width" (event "stageComponent.evStageSizeChanged"))
		(var isWideScreen:bool = "stageWidth > 1599")
		(var elemWidth:number = "isWideScreen ? 300px : 232px")
		(var elemRightOffset:number = "isWideScreen ? -324px : -232px")

		(var maxElemHeight:number = 456)
		
		(var maxScrollAreaHeight:number = "maxElemHeight - 37 - (2 * SXS)")
	)

	(style
		(position = "absolute")
		(top = "SECONDARY_TAB_BUTTON_DEFAULT_HEIGHT")
		(bind right "elemRightOffset")
		(bind width "elemWidth")
		(maxHeight = "maxElemHeight")
	)

	(macro TOOLTIP_SYSTEM_DEFAULT_BACKGROUND)

	(element TOOLTIP_SYSTEM_DEFAULT_CONTAINER
		(element TooltipSystemStatusLine
			_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.ATTENTION"
			_text = "'IDS_PREFERENCES_KEYBINDINGS_ANY_ORPHANS_EXIST'"
			_width = "100%"
		)

		(element TooltipSystemHorizontalDivider)

		(block
			(style
				(width = 100%)
				(bind height "MISSING_PREF_COMMAND_NAME_HEIGHT * orphans.length - M")
				(bind maxHeight "maxScrollAreaHeight")
				
				(paddingLeft = "-M") (paddingRight = "-M") (paddingBottom = "-SXS") (paddingTop = "-SXS")
			)

			(scrollArea
				(class $Fullsize)
				
				
				(style (backgroundColor = 0x01000000))

				(verticalSlider='ScrollBarVLight')

				(topShadow='InfotipShadowTop')
				(bottomShadow='InfotipShadowBottom')

				(hscrollPolicy='off')
				(vscrollPolicy='auto')

				(drag=false)

				(content
					(style
						(bind width "elemWidth")
						
						(paddingLeft = "M") (paddingRight = "M") (paddingBottom = "SXS") (paddingTop = "SXS")
					)

					(block
						(style
							(width = 100%)
							(bind marginBottom "orphans.length <= 15 ? 0 : S")
						)

						(controller $Repeat renderer='CommandNameInOrphanList'
							(bind count "orphans.length")
							(args
								_entity = "orphans[$index]"
							)
						)
					)
				)
			)
		)
	)
)

(def element CommandNameInOrphanList (_entity:gfx)
	(scope
		(var commandEntity:gfx = "$datahub.getPrimaryEntity(CC.commandMappingCommand, _entity.commandMappingCommand.id)")
		(var commandName:str = "commandEntity ? commandEntity.commandForUI.ids : ''")
	)

	(style (width = 100%) (height = "MISSING_PREF_COMMAND_NAME_HEIGHT"))

	(element TooltipSystemDescriptionTextSingleLine
		_descriptionText = "commandName"
	)
)

(def element PrefsNestedMWControlsPanel (data:array)
	(scope
		(event evScrollAreaValueChanged)
		(event evCloseDropdownByOuterEvent)

		(event evShowDiffBtn)
		(event evHideDiffBtn)
		(event evDefaultDiffAppear)
		(event evSliderDiffAppear)
		(event evDefaultDiffDisappear)
		(event evSliderDiffDisappear)

		(event evSliderThumbMouseDown)
		(event evSliderThumbMouseUp)

		(var preferenceDeltaCollection:gfx = "$datahub.getCollection(CC.preferenceDelta)")
		(var nestedDiffCollection:gfx = "preferenceDeltaCollection.getChildByPath('byLevel.' + 1)")
		(var diffItems:array = "nestedDiffCollection.items" (event "nestedDiffCollection.evAdded") (event "nestedDiffCollection.evRemoved"))
		(var isAnyDiff:bool = "diffItems.length > 0")

		(var isAnySliderThumbDown:bool = false)
		(bind isAnySliderThumbDown "true" init=false watch=false (event "evSliderThumbMouseDown"))
		(bind isAnySliderThumbDown "false" init=false watch=false (event "evSliderThumbMouseUp"))

		(var diffItemsUponSliderThumbInit:array = "diffItems" init=false watch=false (event "evSliderThumbMouseDown"))

		(var stageComponent:gfx = "$datahub.getSingleEntity(CC.stage).stage")
		(var stageWidth:number = "stageComponent.width" (event "stageComponent.evStageSizeChanged"))
		(var contentWidth:number = "stageWidth > 1366 ? 400px : 360px")
	)

	(dispatch evDefaultDiffAppear dir="EventDirection.NONE" (bind trigger "isAnyDiff") (bind enabled "diffItems.length == 0 && !isAnySliderThumbDown"))
	(dispatch evSliderDiffAppear dir="EventDirection.NONE" (bind enabled "(diffItems.length > 0) && (diffItemsUponSliderThumbInit.length == 0)") (event "evSliderThumbMouseUp"))
	(dispatch evDefaultDiffDisappear dir="EventDirection.NONE" (bind trigger "isAnyDiff") (bind enabled "diffItems.length > 0 && !isAnySliderThumbDown"))
	(dispatch evSliderDiffDisappear dir="EventDirection.NONE" (bind enabled "(diffItems.length == 0) && (diffItemsUponSliderThumbInit.length > 0)") (event "evSliderThumbMouseUp"))

	(dispatch evShowDiffBtn dir="EventDirection.NONE" (event "evDefaultDiffAppear") (event "evSliderDiffAppear"))
	(dispatch evHideDiffBtn dir="EventDirection.NONE" (event "evDefaultDiffDisappear") (event "evSliderDiffDisappear"))


	(style (height = 100%))

	(block
		(style
			(bind width "contentWidth")
			(height = 100%)
		)

		(block
			(class $Fullsize)
			(style
				(bind paddingBottom "isAnyDiff ? XLL : LM")
			)

			(scrollArea
				(class $Fullsize)
				
				
				(style (backgroundColor = 0x01000000))

				(verticalSlider='ScrollBarVLightWithValueChangedEvent')

				(topShadow='ScrollAreaShadowTop')
				(bottomShadow='ScrollAreaShadowBottom')

				(hscrollPolicy='off')
				(vscrollPolicy='auto')

				(drag=false)

				(content
					(style (bind width "contentWidth"))

					(controller $Repeat renderer='PrefRow'
						(bind count "data.length")
						(args
							_ownerModal = "OWNER_MODAL_TYPE.secondary"
							_data = "data[$index]"
						)
					)
				)

				(dispatch evCloseDropdownByOuterEvent dir="EventDirection.DOWN" (event "evScrollAreaValueChanged"))
			)
		)

		(block
			(class $PrefsNestedAsideLowerButtonsContainer)

			(block
				(style (alpha = 0) (marginBottom = "M"))

				(element DefaultButton
					_size = "SIZE.MEDIUM"
					_name = 'btn_apply'
					_width = 280
					_label = 'IDS_APPLY'
				)

				(controller $Animation
					(bindcall play
						duration = 0.15
						from	 = "{ alpha: 0, y: 10 }"
						to		 = "{ alpha: 1, y: 0 }"
						easing	 = "Easing.quad_out"
						(event "evShowDiffBtn")
					)
					(bindcall play
						duration = 0.15
						from	 = "{ alpha: 1, y: 0 }"
						to		 = "{ alpha: 0, y: 10 }"
						easing	 = "Easing.quad_out"
						(event "evHideDiffBtn")
					)
				)
			)

			(element DefaultButton
				_size = "SIZE.MEDIUM"
				_name = 'btn_cancel'
				_width = 280
				_label = 'IDS_CLOSE_BTN'
			)
		)
	)
)

(def element PrefsNestedMWReferenceImageContainer (_type:str, _crosshairId:number=0, _isCrosshairDynamic:bool=false)
	(scope
		(event evShowDynCrosshairCaption)
		(event evHideDynCrosshairCaption)

		(var stageComponent:gfx = "$datahub.getSingleEntity(CC.stage).stage")
		(var stageWidth:number = "stageComponent.width" (event "stageComponent.evStageSizeChanged"))
		(var stageHeight:number = "stageComponent.height" (event "stageComponent.evStageSizeChanged"))

		(var isCrosshairReferenceImage:bool = "_type == SECONDARY_MODAL_WINDOW_TYPE.crosshairs")

		(var controllersAreaWidth:number = "stageWidth > 1366 ? 400 : 360")

		(var imgRightPadding:number = "MS")
		(var remainingWidth:number = "stageWidth - (controllersAreaWidth + imgRightPadding)")
		(var elemHeight:number = "floor($globalLayoutBounds[3])" (event "$evLayoutBoundsChanged"))
		
		(var isVerticallyCalculated:bool = "(295 * remainingWidth) >= (496 * elemHeight)")

		(var initialCrosshairCaptionAlpha:number = "_isCrosshairDynamic ? TA : 0" watch=false)
		(var initialCrosshairCaptionTopOffset:number = "_isCrosshairDynamic ? 0 : 10" watch=false)
	)

	(dispatch evShowDynCrosshairCaption (bind trigger "_isCrosshairDynamic") (bind enabled "!_isCrosshairDynamic"))
	(dispatch evHideDynCrosshairCaption (bind trigger "_isCrosshairDynamic") (bind enabled "_isCrosshairDynamic"))

	(class $Fullsize)

	(block
		(style
			(align = "center|middle")
			
			(bind width "isVerticallyCalculated ? (elemHeight * 496 / 295) : remainingWidth")
			(bind height "isVerticallyCalculated ? elemHeight : (remainingWidth * 295 / 496)")
			(backgroundSize = "fill")
			(bind backgroundImage "	isCrosshairReferenceImage	? 'url:../prefs/reference_images/crosshairs.jpg'
																: 'url:../prefs/reference_images/color_filters.jpg'")
		)

		(block
			(bind visible "isCrosshairReferenceImage")
			(class $Fullsize)

			(element CrosshairBinocularDefaultRenderer
				_crosshairId = "_crosshairId"
			)
		)

		(block
			(bind visible "isCrosshairReferenceImage")

			(class $FullsizeAbsolute)
			(style (align = "center|middle"))

			(block
				(style
					(marginTop = "XL")
					(width = 380px)
					(height = 0px) 
				)

				(tf
					(class $TextDefaultBold19NM)
					(style
						(position = "absolute")
						(bind top "initialCrosshairCaptionTopOffset")
						(bind alpha "initialCrosshairCaptionAlpha")
						(width = 100%)
						(textAlign = "center")
					)

					(text = 'IDS_DYNAMIC_CROSSHAIR_DESC')

					(controller $Animation
						(bindcall play
							duration = 0.1
							from	 = "{ alpha: 0, top: 10 }"
							to		 = "{ alpha: TA, top: 0 }"
							action="kill"
							(event "evShowDynCrosshairCaption")
						)
						(bindcall play
							duration = 0.1
							from	 = "{ alpha: TA, top: 0 }"
							to		 = "{ alpha: 0, top: -10 }"
							action="kill"
							(event "evHideDynCrosshairCaption")
						)
					)
				)
			)
		)

		(element ColorBlindnessRefImageLegend
			(bind visible "!isCrosshairReferenceImage")
			(style (position = "absolute") (bottom = 0px))
		)
	)
)


(def element ColorBlindnessRefImageLegend ()
	(scope
		(var teams:array = "['ally', 'enemy', 'division', 'teamkiller']")
	)

	(style
		(align = "center|middle")
		(flow = "horizontal")
		(width = 100%)
		(height = 48px)
		(backgroundColor = 0x80000000)
	)

	(controller $Repeat renderer='ColorBlindnessLegendTeam'
		(bind count "teams.length")
		(args
			_team = "teams[$index]"
		)
	)
)

(def element ColorBlindnessLegendTeam (_team:str)
	(style
		(flow = "horizontal")
		(align = "middle")
		(bind marginLeft "$index == 0 ? 0px : LM")
	)

	(block
		(style
			(width = 27px)
			(height = 27px)
			(backgroundImage = "'url:../service_kit/ship_classes/icon_' + _team + '_battleship.png'")
		)
	)

	(block
		(style
			(width = 27px)
			(height = 27px)
			(backgroundImage = "'url:../service_kit/ship_classes/icon_' + _team + '_cruiser.png'")
		)
	)

	(block
		(style
			(width = 27px)
			(height = 27px)
			(backgroundImage = "'url:../service_kit/ship_classes/icon_' + _team + '_destroyer.png'")
		)
	)

	(tf
		(class $TextDefaultBoldNM)
		(style (alpha = "TA") (marginLeft = "S"))
		(bind text "'IDS_OPTIONS_' + toUpper(_team)")
	)
)