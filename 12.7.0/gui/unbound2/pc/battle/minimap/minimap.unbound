
(def constant SCALE_STEP 0.5)
(def constant LIST_MAP_SCALES [1.0, 1.25, 1.5, 1.75, 2.0, 2.25])
(def constant LIST_ICON_SCALES [1.0, 1.0, 1.0, 1.0, 1.0, 1.0])
(def constant MINIMAP_ASSETS_SIZE 196)

(def constant POINT_ATTENTION_ANIM_DURATION 1)
(def constant SHORT_ATTENTION_DURATION 1)
(def constant LONG_ATTENTION_DURATION 4)

(def css $TextMinimapCoordsLabel ()
	(extends $FontFamilyDefaultBold)
	(extends $FontSizeNano)
	(extends $FontColorDefault)
	(extends $TextMouseDisable))

(def css $TextMinimapCoordsLabel15 ()
	(extends $TextMinimapCoordsLabel)
	(extends $FontSizeDefault)
)

(def css $TextMinimapCoordsLabel13 ()
	(extends $TextMinimapCoordsLabel)
	(extends $FontSizeSmall)
)

(def element BattleMinimapUb2 () layout=true dispatch_size_change=true
	(scope
		(var minimapEntity:gfx = "$datahub.getSingleEntity(CC.minimap)")
		
		(var followVehicle:bool = "minimapEntity.minimap.followVehicle" (event "minimapEntity.minimap.evFollowVehicleChanged"))

		(var mouseComponent:gfx = "$datahub.getSingleComponent(CC.mouse)")
		(var isMouseActive:bool = "mouseComponent.active" (event "mouseComponent.evActiveChanged"))

		(var minimapSizeIndexComponent:gfx = "$datahub.getPrimaryEntity(CC.minimapOption, SC.Battle.MINIMAP_OPTION.minimapSizeIndex).minimapOption")
		(var scaleIndex:number = "minimapSizeIndexComponent.value" (event "minimapSizeIndexComponent.evValueChanged"))
		(var mapScale:number = "scaleIndex < LIST_MAP_SCALES.length ? LIST_MAP_SCALES[scaleIndex] : LIST_MAP_SCALES[LIST_MAP_SCALES.length - 1] + SCALE_STEP * (scaleIndex - LIST_MAP_SCALES.length + 1)")

		(event evMouseOverMap)
		(event evMouseOutMap)
		(event evMouseMoveMap)
		(event evMouseDownMap)

		(var mouseOverMap:bool = "$event.isOver" watch=false init=false (event "evMouseOverMap") (event "evMouseOutMap"))
		(var worldX:number = "$event.localX / $event.scaleRatio" watch=false init=false (event "evMouseMoveMap") (event "evMouseOverMap"))
		(var worldY:number = "$event.localY / $event.scaleRatio" watch=false init=false (event "evMouseMoveMap") (event "evMouseOverMap"))

		(var _isLoading:bool = false)
	)

	(bindcall externalCall 'direct.action' "['minimap.setMouseOver', [false]]" watch=false init=false (bind enabled "!isMouseActive"))
	(bindcall externalCall 'direct.action' "['minimap.setMouseOver', [mouseOverMap ? mouseOverMap && isMouseActive : false]]" watch=false init=false (bind trigger "mouseOverMap"))
	(bindcall externalCall 'direct.action' "['minimap.moveOnMinimap', [worldX, worldY]]" (event "evMouseMoveMap"))
	(bindcall externalCall 'direct.action' "['minimap.moveOnMinimap', [worldX, worldY]]" (event "evMouseOverMap"))
	(bindcall externalCall 'direct.action' "['minimap.moveOnMinimap', [-1, -1]]" (event "evMouseOutMap"))

	(controller $Instance
		(bind renderer "followVehicle	? 'MaskedMinimap'
										: 'FullMinimap'")
		(args
			_isLoading="_isLoading"
		)
	)
	
	(dispatch evSwitchOptionsPanel args="{isVisible: false}" dir="EventDirection.DOWN" (event "evMouseDownMap") (bind trigger "mapScale"))

	(element MinimapOptionsButton
		(bind visible "!_isLoading")
		(style (position = "absolute") (right = "20px") (top = "-22px"))
	)
)

(def element FullMinimap (_isLoading:bool = false) layout=true dispatch_size_change=true
	(scope
		(macro MINIMAP_SCOPE)
		(var angleToRotate:number = "minimapEntity.minimap.rotationAngleDeg" (event "minimapEntity.minimap.evRotationAngleDegChanged"))
		(var rotationAngle:number = "minimapEntity.minimap.rotationAngleDeg" watch=false)
		(controller $Animation
			(bindcall play  duration=0.3
							easing="Easing.line"
							from="{ rotationAngle: minimapEntity.minimap.rotationStartDeg }"
							to="{ rotationAngle: minimapEntity.minimap.rotationAngleDeg }"
							watch=false
							(event "minimapEntity.minimap.evRotationAngleDegChanged")
			)
		)
		(var coordsVisible:bool = "rotationAngle == angleToRotate")
	)

	(style
		(bind width "scaleRatio")
		(bind height "scaleRatio")
		(bind hitTest "!_isLoading")
	)

	(block
		(class $FullsizeAbsolute)
		(style
			(bind top "scaleRatio / 2") 
			(bind left "scaleRatio / 2")
			(bind rotation "rotationAngle")
		)
		
		(block
			(class $FullsizeAbsolute)
			(style
				(bind top "-scaleRatio / 2")
				(bind left "-scaleRatio / 2")
			)
			
			(element MinimapBG _scaleRatio="scaleRatio" _mapScale="mapScale" _mapBorderScale="mapBorderScale" _mapBorderMarginX="mapBorderMarginX" _mapBorderMarginY="mapBorderMarginY" _isLoading="_isLoading"
				(scope
					(bind scaleRatio "scaleRatio")
					(bind mapScale "mapScale")
					(bind mapBorderScale "mapBorderScale")
					(bind mapBorderMarginX "mapBorderMarginX")
					(bind mapBorderMarginY "mapBorderMarginY")
				)
				(macro MASK)
			)

			(block
				(class $FullsizeAbsolute)
				(macro MASK)
				(style (hitTest = false))
				(element MinimapMarkersContainer
					_mapScale="mapScale"
					_itemScale="itemScale"
					_scaleRatio="scaleRatio"
					_markerSettingsMap="MINIMAP_MARKERS_SETTINGS"
					_isLoading="_isLoading"
				)
			)

			(block
				(class $FullsizeAbsolute)
				(style (backgroundColor = 0x01000000))

				(macro MINIMAP_CLICK_MASK_EVENTS "scaleRatio")
			)
		)
	)

	(element MinimapCoordLabels _scaleRatio="scaleRatio" _angleToRotate="angleToRotate" _mapScale="mapScale"
		(bind visible "coordsVisible")
	)
)

(def element MaskedMinimap () layout=true dispatch_size_change=true
	(scope
		(macro MINIMAP_SCOPE)

		(var viewPointY:number = "minimapEntity.minimap.centerPoint.y" (event "minimapEntity.minimap.evDispayCoordsChanged"))
		(var viewPointX:number = "minimapEntity.minimap.centerPoint.x" (event "minimapEntity.minimap.evDispayCoordsChanged"))
		(var viewRadius:number = "minimapEntity.minimap.displayRadius" (event "minimapEntity.minimap.evDispayCoordsChanged"))
		(var displayRadius:number = "scaleRatio * 0.5")
		(var displayScaleRatio:number = "scaleRatio/(viewRadius * 2 )") 
		(var displayMapScale:number = "mapScale/(viewRadius * 2 )") 
	)

	
	(style
		(bind width "scaleRatio") 
		(bind height "scaleRatio")
		(margin = "S")
	)

	
	(block
		(style 
			(left = "50%")
			(top = "50%")
			(position = "absolute")
		)
		
		(controller $Sector
			(bind arc "360")
			(bind radius "displayRadius + 1")
			(bind innerRadius "displayRadius + 1")
			(bind lineThickness "2")
			(bind lineColor "0x999999")
			(bind lineAlpha "1")
		)
		(cacheAsBitmap = true)
	)
	
	(block
		(class $FullsizeAbsolute)	
		
		(block
			(style 
				(position = "absolute")
				(left = "50%")
				(top ="50%")
			)

			(controller $Sector
				(bind arc "360")
				(bind radius "displayRadius")
			)
			(isMask = "true")
		)

		
		(block
			(class $FullsizeAbsolute)			
			(style
				(backgroundImage = "'url:../battle_hud/masked_map_background.png'")
				(backgroundSize = "fill")
			)
			(bind alpha "waterAlpha")
		)

		(block
			(class $FullsizeAbsolute)
			
			(style
				(left = "50%")
				(top ="50%")				
			)

			(block
				(class $FullsizeAbsolute) 

				
				(style
					(bind top "- displayScaleRatio * viewPointY")
					(bind left "- displayScaleRatio * viewPointX")
				)
				
				(element MinimapBG _scaleRatio="displayScaleRatio" _mapScale="itemScale" _mapBorderScale="mapBorderScale" _mapBorderMarginX="mapBorderMarginX" _mapBorderMarginY="mapBorderMarginY" _showGrid="false"
					(scope
						(bind scaleRatio "displayScaleRatio")
						(bind mapScale "itemScale * 2")
						(bind mapBorderScale "mapBorderScale")
						(bind mapBorderMarginX "mapBorderMarginX")
						(bind mapBorderMarginY "mapBorderMarginY")
					)
				)

				(block
					(class $FullsizeAbsolute)
					(element MinimapMarkersContainer
						_mapScale="displayMapScale"
						_itemScale="itemScale"
						_scaleRatio="displayScaleRatio"
						_markerSettingsMap="MASKED_MINIMAP_MARKERS_SETTINGS"
					)
				)
				
				(block
					(style
						(bind width "displayScaleRatio")
						(bind height "displayScaleRatio")
						(position = "absolute")
						(backgroundColor = 0x01000000)
					)
					(macro MINIMAP_CLICK_MASK_EVENTS "displayScaleRatio")
				)
			)
		)
	)
	
	(element MinimapCompassPoints __width="scaleRatio" __height="scaleRatio" __scaleIndex="scaleIndex"
		(scope 
			(bind _width "scaleRatio")
			(bind _height "scaleRatio")
			(bind _scaleIndex "scaleIndex")
		)
	)
)

(def macro MINIMAP_SCOPE ()
	(var minimapEntity:gfx = "$datahub.getSingleEntity(CC.minimap)")

	(var minimapSizeIndexComponent:gfx = "$datahub.getPrimaryEntity(CC.minimapOption, SC.Battle.MINIMAP_OPTION.minimapSizeIndex).minimapOption")
	(var scaleIndex:number = "minimapSizeIndexComponent.value" (event "minimapSizeIndexComponent.evValueChanged"))
	(var mapScale:number = "scaleIndex < LIST_MAP_SCALES.length ? LIST_MAP_SCALES[scaleIndex] : LIST_MAP_SCALES[LIST_MAP_SCALES.length - 1] + SCALE_STEP * (scaleIndex - LIST_MAP_SCALES.length + 1)")
	(var itemScale:number = "scaleIndex < LIST_ICON_SCALES.length ? LIST_ICON_SCALES[scaleIndex] : LIST_ICON_SCALES[LIST_MAP_SCALES.length - 1]")
	(var loadingMinimapScale:number = "1.84") 
	(var scaleRatio:number = "MINIMAP_ASSETS_SIZE * (_isLoading ? loadingMinimapScale : mapScale)")

	(var waterAlphaComponent:gfx = "$datahub.getPrimaryEntity(CC.minimapOption, SC.Battle.MINIMAP_OPTION.waterAlpha).minimapOption")
	(var waterAlpha:number = "waterAlphaComponent.value * 0.01" (event "waterAlphaComponent.evValueChanged"))

	(var mapBorderScale:number = "minimapEntity.mapBorder.ratio")
	(var mapBorderMarginX:number = "- scaleRatio * minimapEntity.mapBorder.relativeMargin.x")
	(var mapBorderMarginY:number = "- scaleRatio * minimapEntity.mapBorder.relativeMargin.y")

	(event evMouseOverMap)
	(event evMouseOutMap)
	(event evMouseMoveMap)
	(event evMouseDownMap)
)

(def macro MINIMAP_CLICK_MASK_EVENTS (_scaleRatio:expression)
	(dispatch evMouseOverMap on='mouseOver' args="{isOver: true, localX: $event.localX, localY: $event.localY, scaleRatio : _scaleRatio}"  init=false dir="EventDirection.UP")
	(dispatch evMouseOutMap on='mouseOut' args="{isOver: false}" dir="EventDirection.UP")
	(dispatch evMouseMoveMap on='mouseMove' args="{localX: $event.localX, localY: $event.localY, scaleRatio : _scaleRatio}" init=false dir="EventDirection.UP")
	(dispatch evMouseDownMap on='mouseDown' args="{}" dir="EventDirection.UP")
)

(def element MinimapMarkersContainer (_mapScale:number, _itemScale:number, _scaleRatio:number, _markerSettingsMap:array, _isLoading:bool = false) layout=true
	(scope
		(var markersCollection:gfx = "$datahub.getCollection(CC.minimapMarker)")
		(var availableMarkers:gfx = "markersCollection.getChildByPath('available')")
	)

	(class $FullsizeAbsolute)

	(controller $Repeat renderer='MapMarkerItem'
		(bind count "availableMarkers.items.length" watch=false (event "availableMarkers.evAdded"))
		(bindcall removeChildAt "$event[1]" (event "availableMarkers.evRemoved"))
		(args "availableMarkers" "_mapScale" "_itemScale" "_scaleRatio" "_markerSettingsMap" "_isLoading")
	)
)

(def element MinimapBG (_scaleRatio:number, _mapScale:number, _mapBorderScale:number, _mapBorderMarginX:number, _mapBorderMarginY:number, _showGrid:bool = true, _isLoading:bool = false) layout=true
	(scope
		(var scaleRatio:number = "_scaleRatio")
		(var mapScale:number = "_mapScale")
		(var mapBorderScale:number = "_mapBorderScale")
		(var mapBorderMarginX:number = "_mapBorderMarginX")
		(var mapBorderMarginY:number = "_mapBorderMarginY")

		(var battleDataEntityCollection:gfx = "$datahub.getCollection(CC.battleData)")
		(var battleDataEntity:gfx = "battleDataEntityCollection.items[0]")
		(var mapEntity:gfx = "$datahub.getPrimaryEntity(CC.mapInfo, battleDataEntity.battleInfo.mapId)")

		(var waterAlphaComponent:gfx = "$datahub.getPrimaryEntity(CC.minimapOption, SC.Battle.MINIMAP_OPTION.waterAlpha).minimapOption")
		(var waterAlpha:number = "_isLoading ? 1 : waterAlphaComponent.value * 0.01" (event "waterAlphaComponent.evValueChanged"))

		(var minimapComponent:gfx = "$datahub.getSingleComponent(CC.minimap)")
	)

	(class $FullsizeAbsolute)

	
	(block
		(bind alpha "waterAlpha")
		(style
			(backgroundSize = "fill")
			(bind backgroundImage "'url:' + mapEntity.mapInfo.minimapWaterPath")
			(position = "absolute")
			(bind width "scaleRatio") 
			(bind height "scaleRatio") 
		)
	)

	(block
		(style
			(position = "absolute")
		)
		(controller $Instance renderer='DrawBoundRect' 
			(args x = "-2" y = "-2" width = "scaleRatio + 2" height = "scaleRatio + 2" color = "0x525869" filled="false" line="2" alpha="1")
			(bindcall recreate (bind trigger "scaleRatio"))
			(bind enabled "!_showGrid")
		)
	)

	
	(block
		(class $FullsizeAbsolute)
		(style
			(backgroundSize = "cover")
			(bind backgroundImage "'url:' + mapEntity.mapInfo.minimapPath")
			(bind width "scaleRatio * mapBorderScale")
			(bind height "scaleRatio * mapBorderScale")
			(bind left "mapBorderMarginX * mapBorderScale")
			(bind top "mapBorderMarginY * mapBorderScale")
		)
	)

	
	(controller $Repeat renderer='MinimapGridVertical' count=10
		(args _scaleRatio = "scaleRatio")
		(bind enabled "_showGrid")
	)
	(controller $Repeat renderer='MinimapGridHorizontal' count=10
		(args _scaleRatio = "scaleRatio")
		(bind enabled "_showGrid")
	)

	
	(controller $FxInstance renderer='MinimapRectAttention' lifetime="LONG_ATTENTION_DURATION"
		(bindcall create (event "minimapComponent.evRectAttention"))
		(args _scaleRatio = "scaleRatio" row="$event[1]" column="$event[2]" idPlayer="$event[3]")
	)

	
	(controller $FxInstance renderer='MinimapRectAttentionOld' lifetime="LONG_ATTENTION_DURATION"
		(bindcall create (event "minimapComponent.evRectAttentionOld"))
		(args _scaleRatio = "scaleRatio" row="$event[1]" column="$event[2]" idPlayer="$event[3]")
		(exprs
			(macro BIND_FAIR_SCALE "mapScale")
		)
	)

	 
	(controller $FxInstance renderer='MinimapPointAttention' lifetime="SHORT_ATTENTION_DURATION"
		(bindcall create (event "minimapComponent.evPointAttention"))
		(args _scaleRatio = "scaleRatio" worldX="$event[1]" worldY="$event[2]" type="$event[3]" anim="$event[4]")
		(exprs
			(macro BIND_FAIR_SCALE "mapScale")
		)
	)
)

(def element MinimapCoordLabels (_scaleRatio:number, _angleToRotate:number, _mapScale:number) layout=true
	(scope
		(var coordMargin:number = "-4 - (_mapScale < 2 ? _mapScale : 2) * 3")

		(var letters:array = "[ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J' ]")
		(var digits:array = "[ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]")

		(var currentVertical:array = "  _angleToRotate == 0 || _angleToRotate == 360	? letters :
										_angleToRotate == 90							? digits :
										abs(_angleToRotate) == 180						? letters.reversed
																						: digits.reversed")

		(var currentHorizontal:array = "_angleToRotate == 0 || _angleToRotate == 360	? digits :
										_angleToRotate == 90							? letters.reversed :
										abs(_angleToRotate) == 180						? digits.reversed
																						: letters")
	)

	(class $FullsizeAbsolute)

	(block
		(style (position = "absolute") (bind left "coordMargin"))
		(controller $Repeat renderer='MinimapCoordsLabel'
			(bind count "currentVertical.length")
			(args _height="_scaleRatio / 10" _value="currentVertical[$index]")
		)
	)

	(hblock
		(style (position = "absolute") (bind top "coordMargin"))
		(controller $Repeat renderer='MinimapCoordsLabel'
			(bind count "currentHorizontal.length")
			(args _width="_scaleRatio / 10" _value="currentHorizontal[$index]")
		)
	)
)

(def macro MINIMAP_TOOLTIP_COMMON_PARAMS ()
	(align="top|center")
	(position="border")
	(offset=[0, 0])
	(screenBoundsOffset={left:5, top:5, right:5, bottom:5})
)

(def element MinimapOptionsButton () layout=true
	(scope
		(event evHideInfotip)
		(event evOnButtonClicked)

		(var mouse:gfx = "$datahub.getSingleComponent(CC.mouse)")
		(var isMouseActive:bool = "mouse.active" (event "mouse.evActiveChanged"))

		(var infotipVisible:bool = false)
	)
	(dispatch evHideInfotip args="{}" (bind trigger "isMouseActive"))

	(controller $Tooltip
		(renderer='MinimapOptionsTooltip')
		(bindcall show animation={duration:0.1, easing:"Easing.cubic_in", from:{alpha:0}, to:{alpha:1}} on='rollOver')
		(bindcall hide animation={duration:0.1, easing:"Easing.cubic_out", from:{alpha:1}, to:{alpha:0}} on='rollOut')
		(bind enabled "!(infotipVisible)")
		(macro MINIMAP_TOOLTIP_COMMON_PARAMS)
	)

	(controller $Tooltip
		(renderer='MinimapOptionsInfotip')
		(bindcall show animation={duration:0.1, easing:"Easing.cubic_in", from:{alpha:1}, to:{alpha:1}} (event "evOnButtonClicked"))
		(bindcall hide animation={duration:0.1, easing:"Easing.cubic_out", from:{alpha:1}, to:{alpha:0}} on='evClickOutside' (event "evHideInfotip"))
		(bind infotipVisible "true" init=false on='evShow')
		(bind infotipVisible "false" init=false on='evHide')
		(priority=1)
		(macro MINIMAP_TOOLTIP_COMMON_PARAMS)
	)

	
	(element ButtonSettingsSmall
		(style
			(position = "absolute") (right = "-20px") (top = "-18px")
		)
	)
)

(def element MinimapRectAttention (_scaleRatio:number, row:number, column: number, idPlayer:number) layout=true
	(controller $Animation
		(play
			duration = 0.9
			keyframes="[
				{percent:0, to:{alpha:0}},
				{percent:50, to:{alpha:0.2}, easing:Easing.line},
				{percent:100, to:{alpha:0}, easing:Easing.line}
			]"
			repeatCount = 4
		)
	)
	
	(style
		(position = "absolute")
		(bind top "(_scaleRatio * 0.1 * row) + 0.5")
		(bind left "(_scaleRatio * 0.1 * column) + 0.5")
		
		(backgroundColor = 0xFF00fff6)
		(bind width "1 * _scaleRatio * 0.1")
		(bind height "1 * _scaleRatio * 0.1")
	)
)

(def element MinimapRectAttentionOld (_scaleRatio:number, row:number, column: number, idPlayer:number) layout=true
	(scope
		(var scaleRatio:number = "_scaleRatio")
	)
	(style
		(position = "absolute")
		(bind top "scaleRatio * 0.1 * (row + 0.5)")
		(bind left "scaleRatio * 0.1 * (column + 0.5)")
		(bind backgroundImage "'symbol:minimap_rect_attention'")
	)
)

(def element MinimapPointAttention (_scaleRatio:number, worldX:number, worldY: number, type:number, anim:number) layout=true
	(scope
		(var customRad:number = "14")
		(var customAlpha:number = "0")
		(var isReversed:bool = "anim == SC.Battle.MINIMAP_ATTENTION_APPEARANCE.SENDER")
		(var pointColor:number = "	type == SC.Battle.MINIMAP_ATTENTION_VALUE.COMMON			? 0xFFFFFFFF :
									type == SC.Battle.MINIMAP_ATTENTION_VALUE.COMMON_ALLY		? C_ALLY :
									type == SC.Battle.MINIMAP_ATTENTION_VALUE.COMMON_ENEMY		? C_ENEMY :
									type == SC.Battle.MINIMAP_ATTENTION_VALUE.SPOTTED			? C_ATTENTION
																								: 0xFFFFFFFF")
		(controller $Animation
			(play
				duration = "POINT_ATTENTION_ANIM_DURATION"
				to = { customRad: 5, customAlpha: 1}
				from = { customRad: 16, customAlpha: 0}
				delay = 0
				easing = "Easing.line"
				repeatCount = 1
				reverse = "isReversed"
			)
		)
	)

	(style
		(position = "absolute")
		(bind alpha "customAlpha")
		(bind top "_scaleRatio * worldY")
		(bind left "_scaleRatio * worldX")
	)

	(controller $Sector
		(bind arc "360")
		(bind radius "customRad")
		(bind innerRadius "0")
		(bind colors "[pointColor, pointColor, pointColor]")
		(bind alphas "[0, 0.5, 0]")
		(bind ratios "[175, 215, 255]")
	)
)

(def element MinimapCoordsLabel (_width:number=0, _height:number=0, _value:str='') layout=true
	(style
		(bind width "_width")
		(bind height "_height")
		(align = "center|middle")
	)
	(tf
		(class $TextMinimapCoordsLabel)
		(bind text "_value")
	)
)

(def element MinimapGridVertical (_scaleRatio:number=0) layout=true
	(style 
		(position = "absolute")
		(width = "1px")
		(height = "100%")
		(backgroundColor = "0x10ffffff")
		(bind left "_scaleRatio * 0.1 * ( $index )")
	)
)

(def element MinimapGridHorizontal (_scaleRatio:number=0) layout=true
	(style 
		(position = "absolute")
		(width = "100%")
		(height = "1px")
		(backgroundColor = "0x10ffffff")
		(bind top "_scaleRatio * 0.1 * ( $index )")
	)
)

(def element MinimapCompassPoints(__width:number, __height:number, __scaleIndex:number) layout=true
	(scope
		(var _width:number = "__width")
		(var _height:number = "__height")
		(var _scaleIndex:number = "__scaleIndex")
		(var list_text_size:array = "['', '', '13', '13', '15', '15', '15']")
		(var textClassName:str = "'$TextMinimapCoordsLabel' + list_text_size[_scaleIndex]")
	)
	(style
		(bind width "_width")
		(bind height "_height")
		(position = "absolute")
	)
	(block
		(style 
			(position = "absolute")
			(top = 0px)
			(width = 100%)
		)
		(tf
			(bind class "textClassName")
			(bind text "'IDS_MINIMAP_NORTH'")
			(style
				(textAlign = "center")
				(width = 100%)
				(marginTop = -50%)
			)
		)	
	)

	(block
		(style 
			(position = "absolute")
			(bottom = 0px)
			(width = 100%)
		)
		(tf
			(bind class "textClassName")
			(bind text "'IDS_MINIMAP_SOUTH'")
			(style
				(textAlign = "center")
				(width = 100%)
				(marginBottom = -50%)
			)
		)	
	)

	(block
		(style 
			(position = "absolute")
			(left = 0px)
			(top = 50%)
		)
		(tf
			(bind class "textClassName")
			(bind text "'IDS_MINIMAP_WEST'")
			(style
				(marginTop = -50%)
				(marginLeft = -50%)
			)
		)	
	)

	(block
		(style 
			(position = "absolute")
			(right = 0px)
			(top = 50%)
		)
		(tf
			(bind class "textClassName")
			(bind text "'IDS_MINIMAP_EAST'")
			(style
				(marginTop = -50%)
				(marginRight = -50%)
			)
		)	
	)
)