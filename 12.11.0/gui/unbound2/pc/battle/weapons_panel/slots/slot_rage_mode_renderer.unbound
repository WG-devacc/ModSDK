(def element SlotRageModeRenderer (_col:gfx, totalCount:number) layout=true
	(scope
		(var col:gfx = "_col") 
		(var itemsList:array = "col.items" (event "col.evUpdated"))
		(var rageModeEntity:gfx = "itemsList[$index]" (event "col.evUpdated"))
		(var rageModeComponent:gfx = "rageModeEntity.rageMode")
		(var consumableName:str = "rageModeComponent.name")
		(var isAutoUsage:bool = "rageModeComponent.isAutoUsage")
		
		
		
		(var command:number = "Cmd.CMD_ACTIVATE_RAGE_MODE")
		(var isHotKeyEnabled:bool = "command && !isAutoUsage")

		(var itemImageUrl:str = "'url:../consumables/rageMode_' + consumableName + '.png'")

		(var avatarEntity:gfx = "$datahub.getSingleEntity(CC.playerAvatar)")

		(var _width:number = "SLOT_SIZE")
		(var _height:number = "SLOT_SIZE")

		(var rageModeStateEntity:gfx = "$datahub.getPrimaryEntity(CC.rageModeState, rageModeComponent.ownerId)")
		(var rageModeStateComponent:gfx = "rageModeStateEntity.rageModeState" (event "rageModeStateEntity.evAdded") (event "rageModeStateEntity.evRemoved"))
		(var currentRageModeState:number = "rageModeStateComponent ? rageModeStateComponent.state : SC.Battle.RAGE_MODE_STATE.IDLE" (event "rageModeStateComponent.evStateChanged"))

		(var isCharged:bool = "currentRageModeState == SC.Battle.RAGE_MODE_STATE.CHARGED")
		(var atWork:bool = "currentRageModeState == SC.Battle.RAGE_MODE_STATE.ACTIVE")

		(var currentProgress:number = "rageModeStateComponent ? rageModeStateComponent.currentProgress : 0" (event "rageModeStateComponent.evCurrentProgressChanged"))

		(var timerEntity:gfx = "$datahub.getSingleEntity(CC.timer)")
		(var countdown:gfx = "rageModeStateEntity && rageModeStateEntity.hasComponent(CC.countDown) ? rageModeStateEntity.countDown : null" (event "rageModeStateEntity.evAdded") (event "rageModeStateEntity.evRemoved"))
		(var remainTime:number = "countdown ? countdown.endTime - timerEntity.timer.currentTime : 0" (event "timerEntity.timer.evFrequent") (event "countdown.evEndTimeChanged"))
		(var percentPassed:number = "countdown ? remainTime / countdown.duration : 1")

		(var cameraEntity:gfx = "$datahub.getSingleEntity(CC.camera)")
		(var altVision:bool = "cameraEntity.camera.altVision" (event "cameraEntity.camera.evAltVisionChanged"))
	)

	(style
		(width = "_width")
		(height = "_height")
		(bind marginRight "($index + 1) != totalCount ? PANEL_ITEM_MARGIN : PANEL_GROUP_MARGIN")
	)

	(controller $Tooltip
		(renderer='RageModeTooltip')
		(args _rageModeEntityId="rageModeEntity.id")
		(align="bottom|center")
		(position="border")
		(offset=[0, 20])
		(screenBoundsOffset={left:10, top:30, right:10, bottom:100})
		(macro SIMPLE_TOOLTIP_ANIMATION)
	)

	(block
		(class $FullsizeAbsolute)

		(macro MOUSE_LMB_EXTERNAL_CALL 'direct.action' "['weaponSlot.pressed', [command]]" "isHotKeyEnabled")

		(element RageModeProgress "rageModeStateEntity" "consumableName"
			(bind visible "!altVision")
			(style
				(position = "absolute")
			)
		)

		(element SlotItem
			(scope
				(bind _itemImageUrl "itemImageUrl")
				(bind _isSelectable "false")
				(bind _width "_width")
				(bind _height "_height")
			)
		)

		(element RageModeAltInfo
					_currentProgress="currentProgress"
					_remainTime="remainTime"
			(bind visible "!atWork && altVision")
			(style
				(position = "absolute")
			)
		)

		
		(element SlotReloadBar
			(scope
				(bind _atWork "atWork")
				(bind _percentPassed "percentPassed")
				(bind _remainTime "remainTime > 0 ? remainTime : 0")
			)
			(class $FullsizeAbsolute)
			(bind visible "atWork")
		)

		
		(block
			(class $FullsizeAbsolute)
			(controller $FxInstance lifetime=0.5
				(bind renderer 'SlotWorkStartedFX')
				(bindcall create (event "rageModeEntity.rageModeComponent.evWorkStarted"))
			)
			(controller $FxInstance lifetime=0.5
				(bind renderer 'SlotWorkStartedFX')
				(args
					accented="true"
				)
				(bindcall create (event "rageModeEntity.rageModeComponent.evReloadEnded"))
				(bindcall create (bind enabled "isCharged"))
			)
			(controller $FxInstance lifetime=0.5
				(bind renderer "'SlotReloadStartedFX'")
				(bindcall create (event "rageModeEntity.rageModeComponent.evReloadStarted"))
			)
		)

		
		(block
			(bind visible "atWork")

			(style
				(position = "absolute")
				(left = "-(SLOT_FX_SIZE - SLOT_SIZE) / 2")
				(top = "-(SLOT_FX_SIZE - SLOT_SIZE) / 2")
			)

			(block
				(style
					(backgroundImage = 'url:../battle_hud/weapons_panel/slot/weapon_panel_slot_stroke_green.png')
					(backgroundSize = "fill")
					(width = "SLOT_FX_SIZE")
					(height = "SLOT_FX_SIZE")
				)
			)

			(controller $Animation
				(play duration=1.0
								from={alpha: 1}
								to={alpha: 0.3}
								repeatCount=-1
								action="killAll"
				)
				(bind enabled "atWork")
			)
		)

		
		(controller $Instance (renderer = 'HotkeyIndicator')
			(bind enabled "isHotKeyEnabled")
			(args _commandId="command" _toggled="atWork")
			(exprs
				(style
					(bottom = "-HOTKEY_SIZE[SIZE.MEDIUM]")
					(position = "absolute")
					(hcenter = "0px")
				)
			)
		)

		
		(controller $Instance renderer='LabelAuto'
			(bind enabled "isAutoUsage")
		)
	)
)

(def constant MASK_WIDTH 56)
(def constant MASK_HEIGHT 54)

(def element RageModeProgress (_rageModeStateEntity:gfx, _consumableName:str = 'default') layout=true
	(scope
		(var rageModeStateComponent:gfx = "_rageModeStateEntity && _rageModeStateEntity.hasComponent(CC.rageModeState) ? _rageModeStateEntity.rageModeState : null" (event "_rageModeStateEntity.evAdded") (event "_rageModeStateEntity.evRemoved"))
		(var currentRageModeState:number = "rageModeStateComponent ? rageModeStateComponent.state : SC.Battle.RAGE_MODE_STATE.IDLE" (event "rageModeStateComponent.evStateChanged"))

		(var currentProgress:number = "rageModeStateComponent ? rageModeStateComponent.currentProgress : 0" (event "rageModeStateComponent.evCurrentProgressChanged"))
		(var decrementCount:number = "rageModeStateComponent ? rageModeStateComponent.decrementCount : 1")
		(var decrementPeriod:number = "rageModeStateComponent ? rageModeStateComponent.decrementPeriod : 1")

		(var decrementPeriodLong:number = "decrementPeriod*3")

		(var currentProgressAnim:number = "currentProgress" watch=false)
		(controller $Animation
			(bindcall play  duration="0.35"
							easing="Easing.quad_in"
							to="{ currentProgressAnim: currentProgress}"
							watch=false
							(event "rageModeStateComponent.evCurrentProgressChanged")
			)
		)

		(var fillMaskHeight:number = "MASK_HEIGHT * currentProgressAnim * 0.01")
		(var decrementedMaskBottomOffset:number = "MASK_HEIGHT * ((currentProgressAnim - decrementCount) * 0.01)")
		
		(var timerEntity:gfx = "$datahub.getSingleEntity(CC.timer)")
		(var countdown:gfx = "_rageModeStateEntity && _rageModeStateEntity.hasComponent(CC.countDown) ? _rageModeStateEntity.countDown : null" (event "_rageModeStateEntity.evAdded") (event "_rageModeStateEntity.evRemoved"))
		(var remainTime:number = "countdown ? countdown.endTime - timerEntity.timer.currentTime : 0" (event "timerEntity.timer.evFrequent") (event "countdown.evEndTimeChanged"))

		(var isDecayOn:bool = "currentRageModeState == SC.Battle.RAGE_MODE_STATE.DECAYING || (currentRageModeState == SC.Battle.RAGE_MODE_STATE.DECAY_DELAY && remainTime < decrementPeriodLong)")
		(var isCharged:bool = "currentRageModeState == SC.Battle.RAGE_MODE_STATE.CHARGED")

		(var fillImageColorName:str = "isCharged ? '_green' : '_yellow'")

		(var backgroundImageUrl:str = "'url:../consumables/rageMode_background'  + '_track.png'")
		(var alertImageUrl:str = "'url:../consumables/rageMode_background' + '_white.png'")
		(var fillImageUrl:str = "'url:../consumables/rageMode_background' + fillImageColorName + '.png'")
	)
	(block 
		(style
			(width = "SLOT_SIZE")
			(height = "SLOT_SIZE")
			(position = "absolute")
		)
		(block 
			(style
				(width = "SLOT_SIZE")
				(height = "SLOT_SIZE")
				(position = "absolute")
				(bind backgroundImage "backgroundImageUrl")
			)
			(block 
				(isMask = true)
				(style
					(marginTop = 3px)
					(marginBottom = 3px)
					(marginLeft = 2px)
					(position = absolute)
					(width = "MASK_WIDTH")
					(bind height "MASK_HEIGHT - fillMaskHeight")
					(backgroundColor = 0xFFFFFFFF)
				)
			)
		)

		(block 
			(style
				(width = "SLOT_SIZE")
				(height = "SLOT_SIZE")
				(position = "absolute")
				(bind backgroundImage "fillImageUrl")
			)
			(block 
				(isMask = true)
				(style
					(marginTop = 3px)
					(marginLeft = 2px)
					(marginBottom = 3px)
					(position = absolute)
					(rotation = 180)
					(pivotX = "MASK_WIDTH")
					(pivotY = "MASK_HEIGHT")
					(width = "MASK_WIDTH")
					(bind height "fillMaskHeight")
					(backgroundColor = 0xFFFFFFFF)
				)
			)
		)
		(block 
			(bind visible "isDecayOn")
			(controller $Animation
				(play duration="decrementPeriod/2"
								from={alpha: 1}
								to={alpha: 0}
								repeatCount=-1
								action="killAll"
				)
			)
			(style
				(width = "SLOT_SIZE")
				(height = "SLOT_SIZE")
				(position = "absolute")
				(bind backgroundImage "alertImageUrl")
			)
			(block 
				(isMask = true)
				(style
					(marginTop = 3px)
					(marginLeft = 2px)
					(position = absolute)
					(width = "MASK_WIDTH")
					(bind bottom "3px + decrementedMaskBottomOffset")
					(bind height "MASK_HEIGHT * (decrementCount * 0.01)")
					(backgroundColor = 0xFFFFFFFF)
				)
			)
		)
	)
)

(def element RageModeAltInfo (_currentProgress:number = 0, _remainTime:number = 0) layout=true
	(scope
		(macro HUMAN_READABLE_COUNTDOWN_SCOPE "_remainTime")
		(var countdownColor:number = "_remainTime < 5 ? SC.Ui_styles.SERVICE_COLORS.RED
														: _remainTime < 10	? SC.Ui_styles.SERVICE_COLORS.YELLOW
																			: SC.Ui_styles.SERVICE_COLORS.WHITE")
	) 
	(style
		(width = "SLOT_SIZE")
		(height = "SLOT_SIZE")
		(position = "absolute")
	)
	(block 
		(style
			(width = 100%)
			(height = 100%)
			(backgroundColor = 0xCC000000)
			(align = "center|middle")
		)
		(tf
			(class $TextDefault17NM)
			(bind alpha "_remainTime > 0 ? 0.8 : 0")
			(bind text "countdownText")
			(style
				(bind textColor "countdownColor")
				(marginBottom = "10px")
			)
		)
		(hblock
			(class $MiddleAlignedAbsolutely)
			(style (bottom = 6px))
			(tf
				(alpha = 0.7)
				(class $TextDefaultBold21NM)
				(style (marginRight = "2px"))
				(bind text "_currentProgress")
			)	
			(tf
				(alpha = 0.5)
				(class $TextDefaultNM)
				(text = '/100')
			)
		)
	)
)
