(def element ButtonCameraExcursion (_isInOverState:bool=false, _isInDownState:bool=false, _isExcursionOn:bool=false, _enabled:bool=true)
	(scope
		(event evOnButtonClicked)
		(event btnExcursion_evMouseUp)

		(macro MOUSE_HANDLER_SCOPE "'btnExcursion_'")

		(var isInOverState:bool = "_isInOverState || btnExcursion_rollOver && !btnExcursion_mouseDown")
		(var isInDownState:bool = "_isInDownState || btnExcursion_rollOver && btnExcursion_mouseDown")

		(var backgroundImageURL:str = "_isExcursionOn	? 'url:../service_kit/buttons/icon_controls/camera_on.png'
														: 'url:../service_kit/buttons/icon_controls/camera_off.png'")
	)

	(macro MOUSE_HANDLER
		_enabled = "_enabled"
		_prefix = "'btnExcursion_'"
		_soundSet = "'button_secondary'"
	)
	(dispatch btnExcursion_evMouseUp on='mouseUp' args="{isDown: false}" (bind enabled "_enabled"))
	(dispatch evOnButtonClicked args={} dir="EventDirection.UP" (event "btnExcursion_evMouseUp"))

	(style
		(backgroundSize = "autosize")
		(bind backgroundImage "backgroundImageURL")
	)
)

(def element ButtonSettingsSmall (_enabled:bool=true)
	(scope
		(event evOnButtonClicked)
		(event btn_evMouseUp)

		(macro MOUSE_HANDLER_SCOPE "'btn_'")

		(var isInOverState:bool = "btn_rollOver && !btn_mouseDown")
		(var isInDownState:bool = "btn_mouseDown")
	)

	(macro MOUSE_HANDLER
		_enabled = "_enabled"
		_prefix = "'btn_'"
		_soundSet = "'default_button'"
	)
	(dispatch btn_evMouseUp on='mouseUp' args="{isDown: false}" (bind enabled "_enabled"))
	(dispatch evOnButtonClicked args={} dir="EventDirection.UP" (event "btn_evMouseUp"))

	(style
		(width = 24px)
		(height = 23px)
		(backgroundImage = "'url:../service_kit/buttons/button_settings_small.png'")
	)

	(block
		(alpha = "isInOverState ? 1 : 0")
		(controller $Animation
			(bindcall play	duration=0.15	to="{alpha: 1, visible: true}"	(bind enabled "isInOverState"))
			(bindcall play	duration=0.15	to="{alpha: 0, visible: false}"	(bind enabled "!isInOverState"))
		)

		(style
			(hitTest = "false")
			(position = "absolute")
			(width = 100%)
			(height = 100%)
			(backgroundImage = "'url:../service_kit/buttons/button_settings_small_over.png'")
		)
	)

	(block
		(bind alpha "isInDownState ? 1 : 0")
		(style
			(hitTest = "false")
			(position = "absolute")
			(width = 100%)
			(height = 100%)
			(backgroundImage = "'url:../service_kit/buttons/button_settings_small_down.png'")
		)
	)
)

(def element RulesButton (_methods:array, _name:str='', _enabled:bool=true, _label:str='', _textClass:str='$TextDefaultNM', _hitAreaMargin:array=[0])
	(scope
		(macro MOUSE_HANDLER_SCOPE)

		(var ctRollOver:dict = "{	redMultiplier: 1,	greenMultiplier: 1,	blueMultiplier: 1,	alphaMultiplier: 1,
									redOffset: 45,		greenOffset: 45,	blueOffset: 45,		alphaOffset: 0 }")
		(var ctDown:dict =	"{	redMultiplier: 1,	greenMultiplier: 1,	blueMultiplier: 1,	alphaMultiplier: 1,
								redOffset: -45,		greenOffset: -45,	blueOffset: -45,	alphaOffset: 0 }")

		(var isDown:bool = "_enabled && mouseDown")
		(var isRollover:bool = "_enabled && rollOver")
	)

	(bind colorTransform "	isRollover && !isDown	? ctRollOver :
							isDown					? ctDown
													: CT_NONE")

	(hblock
		(style (align = "middle"))

		(tf
			(bind class "_textClass")
			(style (alpha = "TC"))

			(text = "_label")
		)

		(block
			(style
				(marginLeft = "S") (width = 22px) (height = 22px)
				(backgroundImage = "'url:../service_kit/buttons/info_tab_new.png'")
			)
		)

		(block
			(class $FullsizeAbsolute)

			(macro MOUSE_HANDLER
				_methods = "_methods"
				_soundSet = "'default_button'"
			)
		)
	)
)